{
	"configservice": {
		"prefix": "ask-config",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Router } from '@angular/router';",
			"import { HttpClient } from '@angular/common/http';",
			"import { AlertController, LoadingController, MenuController, ToastController } from '@ionic/angular';",
			"import { Observable } from 'rxjs';",
			"import { Location } from '@angular/common';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ConfigService {",
			"",
			"  public rootUrl = 'http://domain.com/api/values/';",
			"  isLoading = false;",
			"  constructor(",
			"    private http: HttpClient,",
			"    private loadingCtrl: LoadingController,",
			"    private toastCtrl: ToastController,",
			"    private alertController: AlertController,",
			"    private menuCtrl: MenuController,",
			"    private route: Router,",
			"    private location: Location,",
			"  ) { }",
			"",
			"  backFn() {",
			"    this.location.back();",
			"  }",
			"",
			"  homeFn() {",
			"    this.route.navigate(['/dashboard']);",
			"  }",
			"",
			"  menuFn() {",
			"    this.menuCtrl.toggle();",
			"  }",
			"",
			"  getData(url): Observable<any> {",
			"    const apiURL = `${this.rootUrl}${url}`;",
			"    return this.http.get(apiURL);",
			"  }",
			"",
			"  postData(url, bodyValues): Observable<any> {",
			"    const apiURL = `${this.rootUrl}${url}`;",
			"    return this.http.post(apiURL, bodyValues);",
			"  }",
			"",
			"  inrCurrency(x) {",
			"    const currency = new Intl.NumberFormat('en-IN', { currency: 'INR' }).format(x);",
			"    return currency;",
			"  }",
			"",
			"  async loader(msg) {",
			"    this.isLoading = true;",
			"    return await this.loadingCtrl.create({",
			"      spinner: 'crescent',",
			"      // message : `<div class='ion-text-center'><img src='assets/loading.gif'  /> <br/> <div class='pt-2' >msg</div></div>`,",
			"      message: msg,",
			"      //  message : `<img src='assets/loading.gif' class='img-align' /> <br/> <div class='ion-text-center'>msg</div> `,",
			"      // spinner: spin,  // 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-small' | null | undefined",
			"      // cssClass: 'my-custom-class',   // Write CSS in global.css",
			"      // mode : 'ios',",
			"      duration: 25000,",
			"    }).then(a => {",
			"      a.present().then(() => {",
			"        console.log('presented');",
			"        if (!this.isLoading) {",
			"          a.dismiss().then(() => console.log('abort presenting'));",
			"        }",
			"      });",
			"    });",
			"  }",
			"  async loaderDismiss() {",
			"    this.isLoading = false;",
			"    return await this.loadingCtrl.dismiss().then(() => console.log('dismissed'));",
			"  }",
			"",
			"  async toastFn(msg: string, positiontxt: any = 'bottom', headerString?: string) {",
			"    const toast = await this.toastCtrl.create({",
			"      header: headerString,",
			"      message: msg,",
			"      position: positiontxt,",
			"      duration: 3000,",
			"      // cssClass: 'toastcustom',",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Cancel clicked');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await toast.present();",
			"  }",
			"",
			"  async msgAlertFn(msg) {",
			"    const alert = await this.alertController.create({",
			"      header: 'Alert',",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Confirm Cancel: blah');",
			"          }",
			"        },",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"  async exitInternetFn(heading, msg: string) {",
			"    const alert = await this.alertController.create({",
			"      header: heading,",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"            // console.log('Confirm Okay');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"",
			"  async exitFunction() {",
			"    const alert = await this.alertController.create({",
			"      header: 'Exit App ?',",
			"      message: 'Do you want to exit the app?',",
			"      buttons: [",
			"        {",
			"          text: 'Cancel',",
			"          role: 'cancel',",
			"          handler: () => {",
			"",
			"          }",
			"        },",
			"        {",
			"          text: 'Exit',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"}",
			""
		],
		"description": "configservice"
	},
	"custom scss": {
		"prefix": "ask-scss",
		"body": [
			"* {",
			"    outline: none;",
			"    font-family: \"Roboto\", sans-serif;",
			"}",
			"",
			"ion-content {",
			"    --background: none;",
			"    background: url(\"/assets/bgscreen.jpeg\") no-repeat 0 0;",
			"    background-size: cover;",
			"}",
			"",
			"ion-toolbar {",
			"    --background: var(--ion-color-primary);",
			"    --color: var(--ion-color-light);",
			"}",
			"",
			"ion-card {",
			"    border-radius: 5px !important;",
			"    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.175) !important;",
			"    // width: calc(100% - 10px);",
			"}",
			"",
			".myTd {",
			"    padding: 2px;",
			"    font-weight: 800;",
			"}",
			".smallFont {",
			"    font-size: small;",
			"    font-weight: bold;",
			"}",
			"",
			".extraSmallFont {",
			"    font-size: 10px;",
			"    font-weight: bold;",
			"}",
			"",
			".myImg {",
			"    height: 70px;",
			"    width: 70px;",
			"    padding: 10px;",
			"    border: 1px solid var(--ion-color-primary);",
			"}",
			"",
			"ion-header ion-toolbar:first-of-type {",
			"    padding-top: 0;",
			"}",
			"",
			".product-modal {",
			"    padding: 20px;",
			"    --height: 25%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".partno-modal {",
			"    .modal-wrapper {",
			"        position: absolute;",
			"        padding: 15px;",
			"        top: 10%;",
			"        left: 2%;",
			"        right: 2%;",
			"        display: block;",
			"        width: 95%;",
			"        --height: 30%;",
			"        --border-radius: 5px;",
			"    }",
			"    // padding: 15px;",
			"    // --height: 30%;",
			"    // top: 26px;",
			"    // --border-radius: 5px;",
			"}",
			"",
			".customAlert {",
			"    padding: 15px;",
			"    --height: 30%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".popup-modal {",
			"    padding: 15px;",
			"    --height: 85%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".divCenter {",
			"    text-align: center;",
			"    position: absolute;",
			"    left: 0;",
			"    right: 0;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"}",
			"",
			".ngSelectFontSize {",
			"    font-size: 12px;",
			"}",
			"",
			".ng-select.custom ::ng-deep .ng-select-container {",
			"    font-family: clear sans Light !important;",
			"    color: #2d2d2d !important;",
			"    font-size: 10px;",
			"}",
			"",
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size: 10px !important;",
			"    color: #efefef;",
			"}",
			"",
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"    outline: 0px !important;",
			"    -webkit-appearance: none;",
			"    box-shadow: none !important;",
			"}",
			""
		],
		"description": "custom scss"
	},
	"getData": {
		"prefix": "ask-getData",
		"body": [
			"this.config.loader('Please Wait ...');",
			"this.config.getData(`$1`).subscribe(res => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    if (response.result) {",
			"        this.JSON = response.data;",
			"    }",
			"    else {",
			"        this.JSON = [];",
			"        this.config.toastFn(`No details found`);",
			"    }",
			"        this.config.loaderDismiss();",
			"}, error => {",
			"    this.config.loaderDismiss();",
			"    console.log(error);",
			"});",
			""
		],
		"description": "getData"
	},
	"postData": {
		"prefix": "ask-postData",
		"body": [
			"const values = {",
			"    $1: $2",
			"};",
			"this.config.loader('Please Wait ...');",
			"this.config.postData(`$3`, values).subscribe((res) => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    if (response.result) {",
			"        this.JSON = response.data;",
			"    }",
			"    else {",
			"        this.JSON = [];",
			"        this.config.toastFn(`No details found`);",
			"    }",
			"this.config.loaderDismiss();",
			"}, err => {",
			"    this.config.loaderDismiss();",
			"    console.log(err);",
			"});",
			""
		],
		"description": "postData"
	},
	"localstorage": {
		"prefix": "ask-ls",
		"body": [
			"lsUserDetails: any = [];",
			"this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"console.log(lsUserDetails);"
		],
		"description": "localstorage"
	},
	"divCenter": {
		"prefix": "ask-divcenter",
		"body": [
			".divCenter {",
			"    text-align: center;",
			"    position: absolute;",
			"    left: 0;",
			"    right: 0;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"}",
			""
		],
		"description": "divCenter"
	},
	"Remove Box Shadow": {
		"prefix": "ask-removeboxshadow",
		"body": [
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"  outline: 0px !important;",
			"  -webkit-appearance: none;",
			"  box-shadow: none !important;",
			"}"
		],
		"description": "Remove Box Shadow"
	},
	"icon with text below": {
		"prefix": "ask-ibtntxt",
		"body": [
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size:10px !important;",
			"    color: #efefef;",
			"}",
			""
		],
		"description": "icon with text below"
	},
	"ion-thumbnail": {
		"prefix": "ask-ionthumbnail ",
		"body": [
			"ion-thumbnail {",
			"    width: 75% !important;",
			"    height: 75% !important;",
			"    max-width: 80px !important; //any size",
			"    max-height: 80px !important; //any size ",
			"    border: 1px solid #4F4D4B;",
			"}"
		],
		"description": "ion-thumbnail"
	},
	"background image": {
		"prefix": "ask-bgimg",
		"body": [
			"ion-content {",
			"  --background: none;",
			"  background: url(\"/assets/bgscreen.jpeg\") no-repeat 0 0;",
			"  background-size: cover;",
			"}"
		],
		"description": "background image"
	},
	"Basic Npm plugins": {
		"prefix": "ask-npm",
		"body": [
			"npm i font-awesome bootstrap bootstrap-icons jquery animate.css@3.7.0 popper.js ng2-search-filter @ng-select/ng-select",
			"global.scss",
			"@import \"~animate.css/animate.css\";",
			"@import \"~font-awesome/css/font-awesome.css\";",
			"@import \"~bootstrap-icons/font/bootstrap-icons.css\";",
			"@import \"~bootstrap/dist/css/bootstrap.css\";",
			"@import \"./theme/custom.scss\";",
			"",
			"angular.json",
			"Script : ",
			"[",
			"  \"./node_modules/bootstrap/dist/js/bootstrap.min.js\",",
			"  \"./node_modules/jquery/dist/jquery.min.js\"",
			"],"
		],
		"description": "Basic Npm plugins"
	},
	"Auth Guard": {
		"prefix": "ask-guard",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { CanActivate,  Router } from '@angular/router';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class AuthGuard implements CanActivate {",
			"",
			"  constructor(private router: Router) { }",
			"",
			"  canActivate(): boolean {",
			"    console.log(localStorage.getItem('token'));",
			"    if (localStorage.getItem('token')) {",
			"      return true;",
			"    }",
			"    else {",
			"      this.router.navigate(['login']);",
			"    }",
			"  }",
			"",
			"}",
			""
		],
		"description": "Auth Guard"
	},
	"HttpInterceptor": {
		"prefix": "ask-HttpInterceptor",
		"body": [
			"import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';",
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs';",
			"",
			"@Injectable()",
			"export class InterceptorsService implements HttpInterceptor {",
			"  constructor() { }",
			"  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
			"    request = request.clone({",
			"      setHeaders: {",
			"        'Content-Type': 'application/json'",
			"      }",
			"    });",
			"    console.log(request);",
			"    return next.handle(request);",
			"  }",
			"}",
			""
		],
		"description": "HttpInterceptor"
	},
	"import HTTP_INTERCEPTORS": {
		"prefix": "ask-ImportHTTPINTERCEPTORS",
		"body": [
			"{",
			"      provide: HTTP_INTERCEPTORS,",
			"      useClass: InterceptorsService,",
			"      multi: true",
			"}"
		],
		"description": "import HTTP_INTERCEPTORS"
	},
	"network_security_config": {
		"prefix": "ask-network_security_config",
		"body": [
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<network-security-config>",
			"    <base-config cleartextTrafficPermitted=\"true\">",
			"        <trust-anchors>",
			"            <certificates src=\"system\" />",
			"        </trust-anchors>",
			"    </base-config>",
			"    <domain-config cleartextTrafficPermitted=\"true\">",
			"        <domain includeSubdomains=\"true\">doamin.com</domain>",
			"        <domain includeSubdomains=\"true\">http://domain.com</domain>",
			"    </domain-config>",
			"</network-security-config>",
			""
		],
		"description": "network_security_config"
	},
	"Login": {
		"prefix": "ask-login",
		"body": [
			"this.config.loader('Please wait...');",
			"    this.config.postData(`$1`, this.loginValidate).subscribe((res) => {",
			"      const response: any = res;",
			"      if (response.result === true) {",
			"        localStorage.setItem('lsUserDetails', JSON.stringify(response.data));",
			"         localStorage.setItem('token', 'true');",
			"        this.config.loaderDismiss();",
			"        this.loginForm.reset();",
			"        this.menuCtrl.enable(true);",
			"        this.router.navigate(['home']);",
			"      }",
			"      else {",
			"        this.config.loaderDismiss();",
			"      }",
			"    }, err => {",
			"      this.config.loaderDismiss();",
			"      console.log(err);",
			"    });",
			""
		],
		"description": "Login"
	},
	"call method": {
		"prefix": "ask-callmethod",
		"body": [
			"// above @component",
			"declare var window;",
			"//constructor",
			"window.app = this;",
			"",
			"callmethod() {",
			"   if (localStorage.getItem('lsUserDetails') != null) {",
			"     this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"   }",
			"}"
		],
		"description": "call method"
	},
	"Animate Alert": {
		"prefix": "ask-animateAlert",
		"body": [
			"import { AnimationController, Animation } from '@ionic/angular';",
			"",
			"export const customAlertAnimation = (baseEl: HTMLElement, opts?: any): Animation => {",
			"  console.log('baseEl: ', baseEl);",
			"  console.log('opts: ', opts);",
			"  const animationCtrl = new AnimationController();",
			"  const wrapperElem = baseEl.querySelector('.alert-wrapper');",
			"  return (animationCtrl.create()",
			"    .addElement(wrapperElem)",
			"    .duration(1000)",
			"    // .iterations(Infinity)",
			"    .easing('ease-in')",
			"    .fromTo('opacity', 0, 1)",
			"    .fromTo('transform', `translateY(-${baseEl.clientHeight}px)`, 'translateY(0px)') // Top to center",
			"    // .fromTo('transform',  'translateX(100px)','translateX(0px)')  // Right to center",
			"  );",
			"};",
			""
		],
		"description": "Animate Alert"
	},
	"Animate Toast": {
		"prefix": "ask-animateToast",
		"body": [
			"import { AnimationController, Animation } from '@ionic/angular';",
			"",
			"export const customToastAnimation = (baseEl: HTMLElement, opts?: any): Animation => {",
			"  console.log('baseEl: ', baseEl);",
			"  console.log('opts: ', opts);",
			"  const animationCtrl = new AnimationController();",
			"  const wrapperElem = baseEl.querySelector('.toast-wrapper');",
			"  return (animationCtrl.create()",
			"    .addElement(wrapperElem)",
			"    .duration(1000)",
			"    // .iterations(Infinity)",
			"    .easing('ease-in')",
			"    .fromTo('opacity', 0, 1)",
			"    .fromTo('transform', `translateX(-${baseEl.clientHeight}px)`, 'translateY(10px)') // Top",
			"  );",
			"};",
			""
		],
		"description": "Animate Toast"
	},
	"Animate Header": {
		"prefix": "ask-animateHeader",
		"body": [
			"<ion-header #header>",
			"import { AnimationController } from '@ionic/angular';",
			"@ViewChild('header', { read: ElementRef, static: true }) header: ElementRef;",
			"const animateHeader = this.animationCtrl.create()",
			"      .addElement(this.header.nativeElement)",
			"      .duration(1000)",
			"      .iterations(1)",
			"      .fromTo('opacity', '0', '1')",
			"      .fromTo('transform', 'translateY(-100px)', 'translateY(0px)');",
			"    animateHeader.play();"
		],
		"description": "Animate Header"
	},
	"Bootstrap Table": {
		"prefix": "ask-table",
		"body": [
			"<div class=\"p-1\" *ngIf=\"Json.length > 0\">",
			"    <div class=\"table-responsive\">",
			"        <table class=\"table table-striped\">",
			"            <thead>",
			"                <tr class=\"customLabel custTbl\">",
			"                    <th class=\"text-center cusTblHeadFont ion-text-nowrap\">#</th>",
			"                    <th class=\"text-center cusTblHeadFont ion-text-nowrap\">",
			"                    </th>",
			"                </tr>",
			"            </thead>",
			"            <tbody>",
			"                <tr class=\"customLabel\" *ngFor=\"let r of Json; let i =index;\">",
			"                    <td class=\"ion-text-nowrap cusTblFont text-center\">{{i+1}}</td>",
			"                    <td class=\"ion-text-nowrap cusTblFont text-center\">",
			"",
			"                    </td>",
			"                </tr>",
			"                <tr *ngIf=\"Json.length === 0\">",
			"                    <td colspan=\"2\" class=\"text-center\">",
			"                        <ion-text color=\"danger\">",
			"                            No details found",
			"                        </ion-text>",
			"                    </td>",
			"                </tr>",
			"            </tbody>",
			"        </table>",
			"    </div>",
			"</div>"
		],
		"description": "Bootstrap Table"
	},
	"Popup component": {
		"prefix": "ask-popup",
		"body": [
			"async popup(object) {",
			"    const modalCreate = await this.modalCtrl.create({",
			"        component: Component,",
			"        cssClass: 'popup-modal',",
			"        backdropDismiss: false,",
			"        componentProps: {",
			"            obj: object",
			"        }",
			"    });",
			"    modalCreate.onDidDismiss().then((data: any) => {",
			"        console.log(data);",
			"        if (data.data.dismissed) {",
			"",
			"        }",
			"    });",
			"    return modalCreate.present();",
			"}"
		],
		"description": "Popup component"
	},
	"App Component": {
		"prefix": "ask-component",
		"body": [
			"import { Component } from '@angular/core';",
			"import { Network } from '@ionic-native/network/ngx';",
			"import { ConfigService } from './services/config/config.service';",
			"import { Platform } from '@ionic/angular';",
			"",
			"declare var window;",
			"@Component({",
			"  selector: 'app-root',",
			"  templateUrl: 'app.component.html',",
			"  styleUrls: ['app.component.scss'],",
			"})",
			"",
			"export class AppComponent {",
			"  public lsUserDetails: any = [];",
			"  public appPages = [",
			"    { title: 'Home', url: '/home', icon: 'home' }",
			"  ];",
			"  constructor(",
			"    private network: Network,",
			"    public config: ConfigService,",
			"    public platform: Platform,",
			"  ) {",
			"    this.platform.ready().then(() => {",
			"      // this.statusBar.styleLightContent();",
			"      if (localStorage.getItem('lsUserDetails') != null) {",
			"        this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"      }",
			"      this.network.onConnect().subscribe(() => {",
			"        setTimeout(() => {",
			"          if (this.network.type === 'wifi') {",
			"            console.log('we got a wifi connection, woohoo!');",
			"          }",
			"        }, 3000);",
			"      });",
			"      this.network.onDisconnect().subscribe(() => {",
			"        this.config.exitInternetFn('Exit and try again', 'Internet is not available ...!');",
			"        this.config.toastFn(`Internet is not available`);",
			"      });",
			"    });",
			"    window.app = this;",
			"  }",
			"",
			"  callmethod() {",
			"    if (localStorage.getItem('lsUserDetails') != null) {",
			"      this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"    }",
			"  }",
			"}",
			""
		],
		"description": "App Component"
	},
	"custom fonts": {
		"prefix": "ask-fonts",
		"body": [
			"@font-face {",
			"    font-family: \"Montserrat\";",
			"    src: url(\"../assets/fonts/Montserrat-Regular.ttf\");",
			"    font-weight: normal;",
			"    font-style: normal;",
			"}"
		],
		"description": "custom fonts"
	},
	"Activated Route": {
		"prefix": "ask-activatedRoute",
		"body": [
			"private activatedRoute: ActivatedRoute,",
			" this.activatedRoute.queryParams.subscribe(params => {",
			"      if (params && params.querystring) {",
			"        this.obj = JSON.parse(params.querystring);",
			"        console.log(this.obj);",
			"      }",
			"    });"
		],
		"description": "Activated Route"
	},
	"Navigation Extras": {
		"prefix": "ask-navigationExtras",
		"body": [
			"   const obj = {",
			"      $1: $2",
			"    };",
			"    const navigationExtras: NavigationExtras = {",
			"      queryParams: {",
			"        querystring: JSON.stringify(obj)",
			"      }",
			"    };",
			"    this.route.navigate([`/$3`], navigationExtras);",
			""
		],
		"description": "Navigation Extras"
	},
	"Snapshot": {
		"prefix": "ask-snapshot",
		"body": [
			"private activatedRoute: ActivatedRoute,",
			"this.activatedRoute.snapshot.paramMap.get('id');"
		],
		"description": "Snapshot"
	},
	"No Record": {
		"prefix": "ask-norecord",
		"body": [
			"<div class=\"divCenter\" *ngIf=\"JSON.length === 0\">",
			"    <ion-text color=\"danger\">",
			"      <h1>No details found</h1>",
			"    </ion-text>",
			"  </div>",
			""
		],
		"description": "No Record"
	},
	"Cart Count": {
		"prefix": "ask-cartcount",
		"body": [
			".badge-one {",
			"    position: absolute;",
			"    top: 0px;",
			"    right: -5px;",
			"    font-size: 0.6em;",
			"    --padding-start: 5px;",
			"    --padding-end: 5px;",
			"}",
			"<ion-buttons slot=\"end\">",
			"      <ion-button class=\"badge-button\">",
			"        <ion-icon size=\"large\" name=\"cart\"></ion-icon>",
			"        <ion-badge class=\"badge-one\" color=\"danger\">{{cartCount}}</ion-badge>",
			"      </ion-button>",
			" </ion-buttons>"
		],
		"description": "Cart Count"
	},
	"Translate": {
		"prefix": "ask-translate",
		"body": [
			"npm i @ngx-translate/core @ngx-translate/http-loader",
			"",
			"import { TranslateModule, TranslateLoader } from '@ngx-translate/core';",
			"import { TranslateHttpLoader } from '@ngx-translate/http-loader';",
			"import { TranslateConfigService } from './services/translate/translate-config.service';",
			"",
			"// above NgModule",
			"export function LanguageLoader(http: HttpClient) {",
			"  return new TranslateHttpLoader(http, 'assets/translate/', '.json');",
			"}",
			"",
			"// imports array",
			"TranslateModule.forRoot({",
			"      loader: {",
			"        provide: TranslateLoader,",
			"        useFactory: (LanguageLoader),",
			"        deps: [HttpClient]",
			"      }",
			"    }),",
			"",
			"//providers Array ",
			"TranslateConfigService"
		],
		"description": "Translate"
	},
	"Translate Service": {
		"prefix": "ask-translate-config.service.ts",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { TranslateService } from '@ngx-translate/core';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class TranslateConfigService {",
			"",
			"  constructor(",
			"    private translate: TranslateService",
			"  ) { }",
			"",
			"  getDefaultLanguage() {",
			"    const language = this.translate.getBrowserLang();",
			"    this.translate.setDefaultLang(language);",
			"    return language;",
			"  }",
			"",
			"  setLanguage(setLang) {",
			"    this.translate.use(setLang);",
			"  }",
			"}",
			""
		],
		"description": "Translate Service"
	},
	"Translate component": {
		"prefix": "ask-translate-component.ts",
		"body": [
			"import { TranslateConfigService } from 'src/app/services/translate/translate-config.service';",
			"private translateConfigService: TranslateConfigService,",
			"if (localStorage.getItem('lsLang') === null) {",
			"        localStorage.setItem('lsLang', 'en');",
			"        this.translateConfigService.setLanguage('en');",
			"}",
			"console.log(localStorage.getItem('lsLang'));"
		],
		"description": "Translate component"
	},
	"Choose language popup": {
		"prefix": "ask-chooselang",
		"body": [
			"<ion-header>",
			"  <ion-grid class=\"ion-no-padding\" color=\"primary\" style=\"background-color: #13B3E4;color: white;\">",
			"    <ion-row>",
			"      <ion-col size=\"8\">",
			"      <div class=\"p-3\">Choose Langauge</div>",
			"      </ion-col>",
			"      <ion-col size=\"4\" class=\"text-right\" >",
			"          <ion-button class=\"pt-2\" (click)=\"close()\" fill=\"clear\" color=\"dark\">",
			"            <ion-icon name=\"close\" color=\"light\" slot=\"start\"></ion-icon>",
			"          </ion-button>",
			"      </ion-col>",
			"    </ion-row>",
			"  </ion-grid>",
			"</ion-header>",
			"",
			"<ion-content>",
			"  <div class=\"divCenter1\">",
			"    <ion-list lines=\"full\" style=\"background-color: #F5F5F5;\">",
			"      <ion-radio-group [(ngModel)]=\"lang\">   ",
			"        <ion-item>",
			"          <ion-label>English</ion-label>",
			"          <ion-radio slot=\"end\" value=\"en\"></ion-radio>",
			"        </ion-item>",
			"    ",
			"        <ion-item>",
			"          <ion-label>Hindi</ion-label>",
			"          <ion-radio slot=\"end\" value=\"hin\"></ion-radio>",
			"        </ion-item>",
			"      </ion-radio-group>",
			"    </ion-list>",
			"    <div class=\"ion-text-center\">",
			"      <ion-button  (click)=\"getLang()\"  >Submit</ion-button>",
			"    </div>",
			"  </div>",
			"</ion-content>",
			"",
			"import { Component, OnInit } from '@angular/core';",
			"import { ModalController } from '@ionic/angular';",
			"import { TranslateConfigService } from 'src/app/services/translate/translate-config.service';",
			"",
			"@Component({",
			"  selector: 'app-chooselang',",
			"  templateUrl: './chooselang.component.html',",
			"  styleUrls: ['./chooselang.component.scss'],",
			"})",
			"export class ChooselangComponent implements OnInit {",
			"",
			"  lang;",
			"  constructor(",
			"    private modalCtrl: ModalController,",
			"    private translateConfigService: TranslateConfigService,",
			"  ) { }",
			"",
			"  ngOnInit() {",
			"    if (localStorage.getItem('lsLang') != null) {",
			"      this.lang = localStorage.getItem('lsLang');",
			"    }",
			"  }",
			"",
			"  close() {",
			"    this.modalCtrl.dismiss();",
			"  }",
			"",
			"  getLang() {",
			"    console.log(this.lang);",
			"    localStorage.setItem('lsLang', this.lang);",
			"    this.translateConfigService.setLanguage(this.lang);",
			"    this.modalCtrl.dismiss();",
			"  }",
			"",
			"}",
			"",
			"ion-list, ion-item, ion-radio-group {",
			"    --background: #F5F5F5 !important;",
			"}",
			"",
			""
		],
		"description": "Choose language popup"
	},
	"Add new element in array": {
		"prefix": "ask-addelementinarray",
		"body": [
			" this.JSON = response.data.map(item => ({",
			"    ...item,",
			"    showMore: false,",
			"}));",
			""
		],
		"description": "Add new element in array"
	},
	"Remove null and na values from Array": {
		"prefix": "ask-removenullvalues",
		"body": [
			"this.JSON = response.data.filter((el) => {",
			"   return el != null && el !== 'NA';",
			"});"
		],
		"description": "Remove null and na values from Array"
	},
	"Set Value in Form control": {
		"prefix": "ask-formSet",
		"body": [
			"this.profileForm.controls['$1'].setValue($2);"
		],
		"description": "Set Value in Form control"
	},
	"Remove Duplicate from JSON": {
		"prefix": "ask-removeduplicate",
		"body": [
			"removeDuplicates(array, key) {",
			"    return array.reduce((arr, item) => {",
			"      const removed = arr.filter(i => i[key] !== item[key]);",
			"      return [...removed, item];",
			"    }, []);",
			"  };"
		],
		"description": "Remove Duplicate from JSON"
	},
	"Sort in Alphabet": {
		"prefix": "ask-sort",
		"body": [
			"sortFn(array: any, field: string): any[] {",
			"    array.sort((a: any, b: any) => {",
			"      if (a[field] < b[field]) {",
			"        return -1;",
			"      } else if (a[field] > b[field]) {",
			"        return 1;",
			"      } else {",
			"        return 0;",
			"      }",
			"    });",
			"    return array;",
			"  }"
		],
		"description": "Sort in Alphabet"
	},
	"Ng Filter No Record Found": {
		"prefix": "ask-ngFilterNorecord",
		"body": [
			"<div class=\"divCenter\"",
			"      *ngIf=\"(JSON | filter:ngSearchTerm ) as result\">",
			"      <ion-text color=\"danger\" *ngIf=\"result.length === 0\">No Data Found</ion-text>",
			"</div>"
		],
		"description": "Ng Filter No Record Found"
	},
	"Disable Screenshot": {
		"prefix": "ask-disablescreenshot",
		"body": [
			"To disable screenshot, go to MainActivity.java file",
			"import android.view.WindowManager;",
			"add below --> super.onCreate(savedInstanceState);",
			"getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,WindowManager.LayoutParams.FLAG_SECURE);"
		],
		"description": "Disable Screenshot"
	},
	"page transition": {
		"prefix": "ask-pagetransition",
		"body": [
			"IonicModule.forRoot(",
			"      {",
			"        mode: 'md',",
			"        navAnimation: customAnimation",
			"      }",
			"    )",
			"----------------------------------------",
			"import { AnimationController } from '@ionic/angular';",
			"const animationCtrl = new AnimationController();",
			"",
			"// https://github.com/mhartington/v5-animations/blob/master/src/app/animations/index.ts",
			"export const getIonPageElement = (element: HTMLElement) => {",
			"    if (element.classList.contains('ion-page')) {",
			"        return element;",
			"    }",
			"",
			"    const ionPage = element.querySelector(",
			"        ':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs'",
			"    );",
			"    if (ionPage) {",
			"        return ionPage;",
			"    }",
			"    // idk, return the original element so at least something animates and we don't have a null pointer",
			"    return element;",
			"};",
			"",
			"export const customAnimation = (_: HTMLElement, opts: any) => {",
			"    // create root transition",
			"    const rootTransition = animationCtrl",
			"        .create()",
			"        .duration(opts.duration || 333)",
			"        .easing('cubic-bezier(0.7,0,0.3,1)');",
			"",
			"    const enterTransition = animationCtrl.create().addElement(opts.enteringEl);",
			"    const exitTransition = animationCtrl.create().addElement(opts.leavingEl);",
			"",
			"    enterTransition.fromTo('opacity', '0', '1');",
			"    exitTransition.fromTo('opacity', '1', '0');",
			"",
			"    if (opts.direction === 'forward') {",
			"        enterTransition.fromTo('transform', 'translateX(-1.5%)', 'translateX(0%)');",
			"        exitTransition.fromTo('transform', 'translateX(0%)', 'translateX(1.5%)');",
			"    } else {",
			"        enterTransition.fromTo('transform', 'translateX(1.5%)', 'translateX(0%)');",
			"        exitTransition.fromTo('transform', 'translateX(0%)', 'translateX(-1.5%)');",
			"    }",
			"",
			"    rootTransition.addAnimation([enterTransition, exitTransition]);",
			"    return rootTransition;",
			"};",
			""
		],
		"description": "page transition"
	},
	"File Upload": {
		"prefix": "ask-fileupload",
		"body": [
			"  constructor(",
			"    // private http: HttpClient,",
			"    private config: ConfigService,",
			"    private httpBackend: HttpBackend",
			"  ) { }",
			"",
			"uploadFile(formData) {",
			"    console.log(formData);",
			"    const newHttpClient = new HttpClient(this.httpBackend);",
			"    return newHttpClient.post(`${this.config.rootUrl}Upload/PostImage`, formData);",
			"}",
			""
		],
		"description": "File Upload"
	},
	"Group By": {
		"prefix": "ask-group",
		"body": [
			" groupBy(collection: any[], property: string): any[] {",
			"    // prevents the application from breaking if the array of objects doesn't exist yet",
			"    if (!collection) {",
			"      return null;",
			"    }",
			"    const groupedCollection = collection.reduce((previous, current) => {",
			"      if (!previous[current[property]]) {",
			"        previous[current[property]] = [current];",
			"      } else {",
			"        previous[current[property]].push(current);",
			"      }",
			"      return previous;",
			"    }, {});",
			"    // this will return an array of objects, each object containing a group of objects",
			"    return Object.keys(groupedCollection).map(key => ({ key, value: groupedCollection[key] }));",
			"  }"
		],
		"description": "Group By"
	},
	"Hardware Back Button Exit App": {
		"prefix": "ask-hardwarebackexit",
		"body": [
			"this.platform.backButton.subscribe(async () => {",
			"      if (this.router.isActive('/dashboard', true) && this.router.url === '/dashboard') {",
			"        navigator['app'].exitApp();",
			"      }",
			"});"
		],
		"description": "Hardware Back Button Exit App"
	},
	"Login form UI": {
		"prefix": "ask-loginform",
		"body": [
			"<ion-card>",
			"    <div class=\"p-3\">",
			"      <form [formGroup]=\"loginForm\">",
			"        <div class=\"form-group\">",
			"          <label class=\"text-dark\">Email <span class=\"text-danger\">*</span></label>",
			"          <div class=\"input-group mb-1\">",
			"            <input type=\"email\" formControlName=\"email\" inputmode=\"email\" class=\"form-control txt\"",
			"              placeholder=\"Enter your email address\">",
			"            <span class=\"input-group-text\">",
			"              <i class=\"fa fa-envelope\"></i>",
			"            </span>",
			"          </div>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('email').touched && getformControl('email').errors?.required\">",
			"            * Email is required",
			"          </small>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('email').touched && getformControl('email').errors?.email\">",
			"            * Check email format",
			"          </small>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('email').touched && getformControl('email').errors?.pattern\">",
			"            * Invalid email format",
			"          </small>",
			"        </div>",
			"",
			"        <div class=\"form-group pt-2\">",
			"          <label class=\"text-dark\">Password <span class=\"text-danger\">*</span></label>",
			"          <div class=\"input-group mb-1\">",
			"            <input [type]=\"showPassword ? 'password' : 'text'\" class=\"form-control txt\" formControlName=\"Password\"",
			"              placeholder=\"Enter your password\">",
			"            <span class=\"input-group-text\">",
			"              <i (click)=\"showPassword = !showPassword;\" [class]=\"showPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"></i>",
			"            </span>",
			"          </div>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('Password').touched && getformControl('Password').errors?.required\">",
			"            * Password is required",
			"          </small>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('Password').touched && getformControl('Password').errors?.minlength\">",
			"            Minimal length is {{getformControl('Password').errors?.minlength.requiredLength}} and actual is",
			"            {{getformControl('Password').errors?.minlength.actualLength}}",
			"          </small>",
			"          <small class=\"ps-2 text-danger\"",
			"            *ngIf=\"getformControl('Password').touched && getformControl('Password').errors?.maxlength\">",
			"            Maximum length is {{getformControl('Password').errors?.maxlength.requiredLength}} and actual is",
			"            {{getformControl('Password').errors?.maxlength.actualLength}}",
			"          </small>",
			"",
			"        </div>",
			"",
			"        <div class=\"text-center pt-2\" *ngIf=\"isloader\">",
			"          <ion-spinner name=\"crescent\" color=\"primary\" size=\"large\"></ion-spinner>",
			"        </div>",
			"",
			"        <div class=\"text-center pt-2\" *ngIf=\"!isloader\">",
			"          <ion-button (click)=\"onFormSubmit()\" class=\"ion-text-capitalize\" size=\"medium\" color=\"danger\" shape=\"round\">",
			"            <ion-text color=\"light\">",
			"              Sign In",
			"            </ion-text>",
			"          </ion-button>",
			"        </div>",
			"      </form>",
			"      <div class=\"row pt-2\">",
			"        <div class=\"col-12 text-center\">",
			"          <ion-text color=\"primary\" routerLink=\"/forgotpwd\">",
			"            Forgot Password ?",
			"          </ion-text>",
			"        </div>",
			"      </div>",
			"    </div>",
			"  </ion-card>",
			""
		],
		"description": "Login form UI"
	},
	"Login form TS": {
		"prefix": "ask-loginformts",
		"body": [
			"import { Component, OnInit } from '@angular/core';",
			"import { FormBuilder, FormGroup, FormControl, Validators, FormArray } from '@angular/forms';",
			"import { Router } from '@angular/router';",
			"import { MenuController, Platform } from '@ionic/angular';",
			"import { ConfigService } from 'src/app/services/config/config.service';",
			"declare var window;",
			"@Component({",
			"  selector: 'app-login',",
			"  templateUrl: './login.page.html',",
			"  styleUrls: ['./login.page.scss'],",
			"})",
			"export class LoginPage implements OnInit {",
			"  showPassword: boolean = true;",
			"  loginForm: FormGroup;",
			"  isloader: boolean = false;",
			"  constructor(",
			"    private platform: Platform,",
			"    private router: Router,",
			"    private menuCtrl: MenuController,",
			"    private config: ConfigService,",
			"  ) {",
			"    this.loginForm = new FormGroup({",
			"      email: new FormControl('', [",
			"        Validators.required,",
			"        Validators.email,",
			"        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')",
			"      ]),",
			"      Password: new FormControl('', [",
			"        Validators.required,",
			"        Validators.minLength(8),",
			"        Validators.maxLength(12)",
			"      ])",
			"    });",
			"    this.platform.backButton.subscribe(async () => {",
			"      if (this.router.isActive('/login', true) && this.router.url === '/login') {",
			"        navigator['app'].exitApp();",
			"      }",
			"    });",
			"  }",
			"",
			"  ngOnInit() {",
			"    localStorage.clear();",
			"    this.menuCtrl.enable(false);",
			"  }",
			"",
			"",
			"  onFormSubmit() {",
			"    localStorage.clear();",
			"    if (!this.loginForm.valid) {",
			"      this.loginForm.markAllAsTouched();",
			"      return;",
			"    }",
			"    console.log(this.loginForm.value);",
			"",
			"    // this.config.loader('Loading ...');",
			"    this.isloader = true;",
			"    this.config.postData(`login`, this.loginForm.value).subscribe((res) => {",
			"      const response: any = res;",
			"      if (response.result === true) {",
			"        window.app.callmethod();",
			"        this.loginForm.reset();",
			"        this.menuCtrl.enable(true);",
			"        localStorage.setItem('lsUserDet', JSON.stringify(response.data));",
			"        localStorage.setItem('token', 'true');",
			"        this.router.navigateByUrl('/home');",
			"        // this.config.loaderDismiss();",
			"        this.isloader = false;",
			"      }",
			"      else {",
			"        // this.config.loaderDismiss();",
			"        this.isloader = false;",
			"      }",
			"      this.config.toastFn(response.msg);",
			"    }, err => {",
			"      // this.config.loaderDismiss();",
			"      console.log(err);",
			"      setTimeout(() => {",
			"        this.isloader = false;",
			"        this.config.toastFn(`Something went wrong, Try later`);",
			"      }, 3000);",
			"    });",
			"  }",
			"",
			"  getformControl(formControl) {",
			"    return this.loginForm.get(formControl) as FormArray;",
			"  }",
			"}",
			""
		],
		"description": "Login form TS"
	},
	"Change Password Form UI Design": {
		"prefix": "ask-changepwdUI",
		"body": [
			"<ion-header>",
			"  <app-header></app-header>",
			"  <ion-toolbar>",
			"    <ion-buttons slot=\"start\">",
			"      <ion-menu-button></ion-menu-button>",
			"    </ion-buttons>",
			"    <ion-title>",
			"      Change Password",
			"    </ion-title>",
			"  </ion-toolbar>",
			"</ion-header>",
			"<ion-content>",
			"  <ion-card>",
			"    <div class=\"p-3\">",
			"      <form [formGroup]=\"validationsForm\" autocomplete=\"off\">",
			"",
			"        <div class=\"form-group pb-2\">",
			"          <label class=\"text-dark\">Old Password <span class=\"text-danger\">*</span></label>",
			"          <div class=\"input-group mb-1\">",
			"            <input [type]=\"showOldPassword ? 'password' : 'text'\" class=\"form-control txt\" formControlName=\"oldpassword\"",
			"              placeholder=\"Enter your old password\">",
			"            <span class=\"input-group-text\">",
			"              <i (click)=\"showOldPassword = !showOldPassword\"",
			"                [class]=\"showOldPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"></i>",
			"            </span>",
			"          </div>",
			"          <div class=\"validation-errors\">",
			"            <ng-container *ngFor=\"let validation of validationMSG.password\">",
			"              <div class=\"text-danger\"",
			"                *ngIf=\"validationsForm.get('oldpassword').hasError(validation.type) && (validationsForm.get('oldpassword').dirty || validationsForm.get('oldpassword').touched)\">",
			"                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}",
			"              </div>",
			"            </ng-container>",
			"          </div>",
			"",
			"        </div>",
			"",
			"",
			"        <div formGroupName=\"matching_passwords\">",
			"          <div class=\"form-group pb-2\">",
			"            <label class=\"text-dark\">New Password <span class=\"text-danger\">*</span></label>",
			"",
			"            <div class=\"input-group mb-1\">",
			"              <input [type]=\"showNewPassword ? 'password' : 'text'\" class=\"form-control txt\" formControlName=\"password\"",
			"                placeholder=\"Enter your new password\">",
			"              <span class=\"input-group-text\">",
			"                <i (click)=\"showNewPassword = !showNewPassword\"",
			"                  [class]=\"showNewPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"></i>",
			"              </span>",
			"            </div>",
			"",
			"            <div class=\"validation-errors\">",
			"              <ng-container *ngFor=\"let validation of validationMSG.password\">",
			"                <div class=\"text-danger\"",
			"                  *ngIf=\"validationsForm.get('matching_passwords').get('password').hasError(validation.type) && (validationsForm.get('matching_passwords').get('password').dirty || validationsForm.get('matching_passwords').get('password').touched)\">",
			"                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}",
			"                </div>",
			"              </ng-container>",
			"            </div>",
			"          </div>",
			"",
			"          <div class=\"form-group pb-2\">",
			"            <label class=\"text-dark\">Confirm Password <span class=\"text-danger\">*</span></label>",
			"",
			"            <div class=\"input-group mb-1\">",
			"              <input [type]=\"showConfirmPassword ? 'password' : 'text'\" class=\"form-control txt\"",
			"                formControlName=\"confirm_password\" placeholder=\"Enter your confirm password\">",
			"              <span class=\"input-group-text\">",
			"                <i (click)=\"showConfirmPassword = !showConfirmPassword\"",
			"                  [class]=\"showConfirmPassword ? 'fa fa-eye-slash' : 'fa fa-eye'\"></i>",
			"              </span>",
			"            </div>",
			"",
			"",
			"            <div class=\"validation-errors\">",
			"              <ng-container *ngFor=\"let validation of validationMSG.confirmPassword\">",
			"                <div class=\"text-danger\"",
			"                  *ngIf=\"validationsForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validationsForm.get('matching_passwords').get('confirm_password').dirty || validationsForm.get('matching_passwords').get('confirm_password').touched)\">",
			"                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}",
			"                </div>",
			"              </ng-container>",
			"            </div>",
			"          </div>",
			"",
			"          <!-- These validations are for the form group -->",
			"          <div class=\"validation-errors\">",
			"            <ng-container *ngFor=\"let validation of validationMSG.matchingPasswords\">",
			"              <div class=\"text-danger\"",
			"                *ngIf=\"validationsForm.get('matching_passwords').hasError(validation.type) && (validationsForm.get('matching_passwords').get('confirm_password').dirty || validationsForm.get('matching_passwords').get('confirm_password').touched)\">",
			"                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}",
			"              </div>",
			"            </ng-container>",
			"          </div>",
			"        </div>",
			"        <div class=\"pt-2 text-center\">",
			"          <ion-button color=\"primary\" [disabled]=\"!validationsForm.valid\" class=\"ion-text-capitalize\" size=\"medium\"",
			"            color=\"danger\" shape=\"round\" (click)=\"onSubmit(validationsForm.value)\">",
			"            <ion-text color=\"light\">",
			"              Update",
			"            </ion-text>",
			"          </ion-button>",
			"        </div>",
			"      </form>",
			"    </div>",
			"  </ion-card>",
			"",
			"</ion-content>",
			""
		],
		"description": "Change Password Form UI Design"
	},
	"Change Password TS Code": {
		"prefix": "ask-changepwdts",
		"body": [
			"import { Component, OnInit } from '@angular/core';",
			"import { Password } from 'src/app/services/password';",
			"import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';",
			"import { ConfigService } from 'src/app/services/config/config.service';",
			"import { Router } from '@angular/router';",
			"import { MenuController } from '@ionic/angular';",
			"@Component({",
			"  selector: 'app-changepwd',",
			"  templateUrl: './changepwd.page.html',",
			"  styleUrls: ['./changepwd.page.scss'],",
			"})",
			"export class ChangepwdPage implements OnInit {",
			"  showOldPassword = true;",
			"  showNewPassword = true;",
			"  showConfirmPassword = true;",
			"  validationsForm: FormGroup;",
			"  matching_passwords_group: FormGroup;",
			"  validationMSG = {",
			"    password: [",
			"      { type: 'required', message: 'Password is required.' },",
			"      { type: 'minlength', message: 'Password must be at least 8 characters long.' },",
			"      // { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }",
			"    ],",
			"    confirmPassword: [",
			"      { type: 'required', message: 'Confirm password is required.' }",
			"    ],",
			"    matchingPasswords: [",
			"      { type: 'areEqual', message: 'Password mismatch.' }",
			"    ],",
			"  };",
			"  constructor(",
			"    private config: ConfigService,",
			"    public formBuilder: FormBuilder,",
			"    private route: Router,",
			"    private menuCtrl: MenuController,",
			"  ) { }",
			"",
			"  ngOnInit() {",
			"    this.matching_passwords_group = new FormGroup({",
			"      password: new FormControl('', Validators.compose([",
			"        Validators.minLength(8),",
			"        Validators.required,",
			"        // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')",
			"      ])),",
			"      confirm_password: new FormControl('', Validators.required)",
			"    }, (formGroup: FormGroup) => {",
			"      return Password.areEqual(formGroup);",
			"    });",
			"",
			"    this.validationsForm = this.formBuilder.group({",
			"      matching_passwords: this.matching_passwords_group,",
			"      oldpassword: new FormControl('', Validators.compose([",
			"        Validators.required,",
			"      ])),",
			"    });",
			"  }",
			"",
			"",
			"",
			"  onSubmit(values) {",
			"    const lsUserDetails = JSON.parse(localStorage.getItem('lsUserDet'));",
			"    console.log(lsUserDetails);",
			"    const obj = {",
			"      Id: lsUserDetails.Id,",
			"      Password: values.oldpassword,",
			"      NewPassword: values.matching_passwords.password",
			"    };",
			"    console.log(obj);",
			"",
			"    return;",
			"    this.config.loader('Changing Password ...');",
			"    this.config.postData(`$1`, obj).subscribe((res) => {",
			"      const response: any = res;",
			"      if (response.result === true) {",
			"        this.validationsForm.reset();",
			"        this.config.loaderDismiss();",
			"        this.menuCtrl.enable(false);",
			"        localStorage.clear();",
			"        this.route.navigate(['/login']);",
			"      }",
			"      else {",
			"        this.config.loaderDismiss();",
			"      }",
			"      this.config.toastFn(response.msg);",
			"    }, err => {",
			"      this.config.loaderDismiss();",
			"      console.log(err);",
			"    });",
			"  }",
			"}",
			""
		],
		"description": "Change Password TS Code"
	},
	"Change Password Service": {
		"prefix": "ask-changepwdservice",
		"body": [
			"import { FormControl, FormGroup } from '@angular/forms';",
			"",
			"export class Password {",
			"    static areEqual(formGroup: FormGroup) {",
			"        let val;",
			"        let valid = true;",
			"",
			"        for (let key in formGroup.controls) {",
			"            if (formGroup.controls.hasOwnProperty(key)) {",
			"                const control: FormControl = <FormControl>formGroup.controls[key];",
			"",
			"                if (val === undefined) {",
			"                    val = control.value;",
			"                } else {",
			"                    if (val !== control.value) {",
			"                        valid = false;",
			"                        break;",
			"                    }",
			"                }",
			"            }",
			"        }",
			"        if (valid) {",
			"            return null;",
			"        }",
			"        return {",
			"            areEqual: true",
			"        };",
			"    }",
			"}",
			""
		],
		"description": "Change Password Service"
	},
	"Upload img from camera or gallery": {
		"prefix": "ask-imagefromcameragallery",
		"body": [
			"import { Camera, CameraOptions, PictureSourceType } from '@ionic-native/camera/ngx';",
			"import { UploadService } from 'src/app/service/upload/upload.service';",
			"import { File, FileEntry } from '@ionic-native/file/ngx';",
			"presentActionSheet(foldername, fieldname) {",
			"    const actionSheet = this.actionSheetController.create({",
			"      header: `Upload`,",
			"      buttons: [{",
			"        text: 'Pick Image From Gallery',",
			"        icon: 'images-outline',",
			"        handler: () => {",
			"          this.takePicture(this.camera.PictureSourceType.PHOTOLIBRARY, foldername, fieldname);",
			"        }",
			"      }, {",
			"        text: 'Pick Image From Camera',",
			"        icon: 'camera-outline',",
			"        handler: () => {",
			"          this.takePicture(this.camera.PictureSourceType.CAMERA, foldername, fieldname);",
			"        }",
			"      }",
			"        , {",
			"        text: 'Cancel',",
			"        icon: 'close',",
			"        role: 'cancel',",
			"",
			"        handler: () => {",
			"          console.log('Cancel clicked');",
			"        }",
			"      }]",
			"    }).then(actionsheet => {",
			"      actionsheet.present();",
			"    });",
			"  }",
			"",
			"  takePicture(sourceTypes: PictureSourceType, foldername, fieldname) {",
			"    const options: CameraOptions = {",
			"      quality: 20,",
			"      sourceType: sourceTypes,",
			"      saveToPhotoAlbum: false,",
			"      correctOrientation: true",
			"    };",
			"    this.camera.getPicture(options).then((imageData) => {",
			"      this.file.resolveLocalFilesystemUrl(imageData).then((entry: FileEntry) => {",
			"        entry.file(file => {",
			"          console.log(file);",
			"          this.readFile(file, foldername, fieldname);",
			"        });",
			"      });",
			"    }, (err) => {",
			"      // Handle error",
			"      console.log(err);",
			"    });",
			"  }",
			"",
			"  readFile(file: any, foldername, fieldname) {",
			"    this.config.loader(`Uploading ${foldername} Image...`);",
			"    const reader = new FileReader();",
			"    reader.onloadend = () => {",
			"      const imgBlob = new Blob([reader.result], {",
			"        type: file.type",
			"      });",
			"      const formData = new FormData();",
			"      // formData.append(name, 'Hello');",
			"      console.log(file.name);",
			"      formData.append('', imgBlob, file.name);",
			"      this.uploadService.uploadFile(formData, 'Profile').subscribe(dataRes => {",
			"        console.log(dataRes);",
			"        const response: any = dataRes;",
			"        if (response.Message.includes('Success')) {",
			"          this.ngOwnerImg = file.name;",
			"          console.log(response.Message.replace('Success.', ''));",
			"          // this.config.msgAlertFn('Image Uploaded');",
			"          console.log(this.ngWorkshop);",
			"          console.log('ngOwnerImg', this.ngOwnerImg);",
			"          // const obj = {",
			"          //   [fieldname]: this.ngWorkshop",
			"          // };",
			"          this.config.loaderDismiss();",
			"          this.config.msgAlertFn(`Image Uploaded`);",
			"        }",
			"      }, err => {",
			"        this.config.loaderDismiss();",
			"        this.config.toastFn(`Image Upload Failed. Try Again`, 'middle');",
			"        console.log(err);",
			"      });",
			"    };",
			"    reader.readAsArrayBuffer(file);",
			"  }",
			"",
			""
		],
		"description": "Upload img from camera or gallery"
	},
	"Set Form Value": {
		"prefix": "ask-setformvalue",
		"body": [
			"this.form..controls['$1'].setValue($2);"
		],
		"description": "Set Form Value"
	},
	"Upload Service": {
		"prefix": "ask-uploadservice",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { HttpClient, HttpBackend } from '@angular/common/http';",
			"import { ConfigService } from '../config/config.service';",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class UploadService {",
			"  constructor(",
			"    // private http: HttpClient,",
			"    private config: ConfigService,",
			"    private httpBackend: HttpBackend",
			"  ) { }",
			"",
			"  uploadFile(formData, foldername) {",
			"    console.log(formData);",
			"    const newHttpClient = new HttpClient(this.httpBackend);",
			"    return newHttpClient.post(`${this.config.uploadImgUrl}/PostImage?foldername=${foldername}`, formData);",
			"  }",
			"}",
			""
		],
		"description": "Upload Service"
	},
	"Cordova Plugins": {
		"prefix": "ask-cordovaplugins",
		"body": [
			"ionic cordova plugin add cordova-plugin-network-information",
			"npm install @ionic-native/network",
			"",
			"ionic cordova plugin add cordova-plugin-screen-orientation",
			"npm install @ionic-native/screen-orientation",
			"import { ScreenOrientation } from '@ionic-native/screen-orientation/ngx';",
			"private screenOrientation: ScreenOrientation,",
			"this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.PORTRAIT);",
			"",
			"ionic cordova plugin add cordova-plugin-statusbar",
			"npm install @ionic-native/status-bar",
			"import { StatusBar } from '@ionic-native/status-bar/ngx';",
			"this.statusBar.overlaysWebView(false);",
			"this.statusBar.backgroundColorByHexString('#34367e');",
			"",
			"ionic cordova plugin add cordova-plugin-camera",
			"npm install @ionic-native/camera",
			"",
			"ionic cordova plugin add cordova-plugin-file",
			"npm install @ionic-native/file",
			"",
			"ionic cordova plugin add call-number",
			"npm install @ionic-native/call-number",
			"",
			"ionic cordova plugin add cordova-plugin-geolocation",
			"npm install @ionic-native/geolocation",
			"",
			"ionic cordova plugin add cordova-plugin-androidx",
			"ionic cordova plugin add cordova-plugin-androidx-adapter",
			"ionic cordova plugin add cordova-plugin-telerik-imagepicker@2.3.3",
			"",
			"NSCameraUsageDescription",
			"helps to take image from camera"
		],
		"description": "Cordova Plugins"
	},
	"Ionic date picker": {
		"prefix": "ask-iondatepicker",
		"body": [
			"<ion-modal class=\"datetime-modal\" trigger=\"open-datetime\">",
			"        <ng-template>",
			"          <ion-content>",
			"            <ion-datetime #dateTime></ion-datetime>",
			"          </ion-content>",
			"        </ng-template>",
			"      </ion-modal>",
			"      <div class=\"form-group pb-2\">",
			"        <label class=\"text-dark\">Date of Birth <span class=\"text-danger\">*</span></label>",
			"        <input id=\"date\" class=\"form-control\" placeholder=\"Date of Birth\" formControlName=\"dob\">",
			"        <ion-modal trigger=\"date\" size=\"cover\">",
			"          <ng-template>",
			"            <ion-datetime presentation=\"date\" (ionChange)=\"dateEvent($event)\"></ion-datetime>",
			"          </ng-template>",
			"        </ion-modal>",
			"        <small class=\"ps-2 text-danger\" *ngIf=\"getformControl('dob').touched && getformControl('dob').errors?.required\">",
			"          * Date of Birth is required",
			"        </small>",
			"</div>",
			""
		],
		"description": "Ionic date picker"
	},
	"Ionic date picker ts": {
		"prefix": "ask-iondatepickerts",
		"body": [
			"dateEvent(ev) {",
			"    console.log(ev.detail.value);",
			"    const dob = this.datepipe.transform(ev.detail.value, 'yyyy-MM-dd');",
			"    this.registerForm.controls['dob'].setValue(dob);",
			"    this.modalCtrl.dismiss();",
			"}"
		],
		"description": "Ionic date picker ts"
	},
	"Ng Select Multiple": {
		"prefix": "ask-ngselect",
		"body": [
			" <ng-select [items]=\"$1\" [multiple]=\"true\" placeholder=\"Select\"",
			"            formControlName=\"vehicleservice\" #selectTypeSer (close)=\"selectTypeSer.blur(); selectTypeSer.focus()\"",
			"            dropdownPosition=\"top\" [closeOnSelect]=\"true\">",
			"            <ng-template ng-header-tmp>",
			"              <div>",
			"                <ion-badge color=\"success\" (click)=\"onSelectAll()\">Select All</ion-badge>&nbsp;",
			"                <ion-badge color=\"danger\" (click)=\"onClearAll()\">Clear All</ion-badge>",
			"              </div>",
			"    </ng-template>",
			"</ng-select>",
			"",
			"onSelectAll() {",
			"    const selected = this.$2.map(item => item);",
			"    this.registerForm.get('$3').patchValue(selected);",
			"}",
			"",
			"onClearAll() {",
			"   this.registerForm.get('$4').patchValue([]);",
			"}",
			"",
			""
		],
		"description": "Ng Select Multiple"
	},
	"India States JSON": {
		"prefix": "ask-INDstates",
		"body": [
			"[",
			"  { \"code\": \"AN\", \"name\": \"Andaman and Nicobar Islands\" },",
			"  { \"code\": \"AP\", \"name\": \"Andhra Pradesh\" },",
			"  { \"code\": \"AR\", \"name\": \"Arunachal Pradesh\" },",
			"  { \"code\": \"AS\", \"name\": \"Assam\" },",
			"  { \"code\": \"BR\", \"name\": \"Bihar\" },",
			"  { \"code\": \"CG\", \"name\": \"Chandigarh\" },",
			"  { \"code\": \"CH\", \"name\": \"Chhattisgarh\" },",
			"  { \"code\": \"DH\", \"name\": \"Dadra and Nagar Haveli\" },",
			"  { \"code\": \"DD\", \"name\": \"Daman and Diu\" },",
			"  { \"code\": \"DL\", \"name\": \"Delhi\" },",
			"  { \"code\": \"GA\", \"name\": \"Goa\" },",
			"  { \"code\": \"GJ\", \"name\": \"Gujarat\" },",
			"  { \"code\": \"HR\", \"name\": \"Haryana\" },",
			"  { \"code\": \"HP\", \"name\": \"Himachal Pradesh\" },",
			"  { \"code\": \"JK\", \"name\": \"Jammu and Kashmir\" },",
			"  { \"code\": \"JH\", \"name\": \"Jharkhand\" },",
			"  { \"code\": \"KA\", \"name\": \"Karnataka\" },",
			"  { \"code\": \"KL\", \"name\": \"Kerala\" },",
			"  { \"code\": \"LD\", \"name\": \"Lakshadweep\" },",
			"  { \"code\": \"MP\", \"name\": \"Madhya Pradesh\" },",
			"  { \"code\": \"MH\", \"name\": \"Maharashtra\" },",
			"  { \"code\": \"MN\", \"name\": \"Manipur\" },",
			"  { \"code\": \"ML\", \"name\": \"Meghalaya\" },",
			"  { \"code\": \"MZ\", \"name\": \"Mizoram\" },",
			"  { \"code\": \"NL\", \"name\": \"Nagaland\" },",
			"  { \"code\": \"OR\", \"name\": \"Odisha\" },",
			"  { \"code\": \"PY\", \"name\": \"Puducherry\" },",
			"  { \"code\": \"PB\", \"name\": \"Punjab\" },",
			"  { \"code\": \"RJ\", \"name\": \"Rajasthan\" },",
			"  { \"code\": \"SK\", \"name\": \"Sikkim\" },",
			"  { \"code\": \"TN\", \"name\": \"Tamil Nadu\" },",
			"  { \"code\": \"TS\", \"name\": \"Telangana\" },",
			"  { \"code\": \"TR\", \"name\": \"Tripura\" },",
			"  { \"code\": \"UK\", \"name\": \"Uttarakhand\" },",
			"  { \"code\": \"UP\", \"name\": \"Uttar Pradesh\" },",
			"  { \"code\": \"WB\", \"name\": \"West Bengal\" }",
			"]",
			""
		],
		"description": "India States JSON"
	},
	"Get States": {
		"prefix": "ask-getstates",
		"body": [
			" getState() {",
			"    this.http.get('assets/state.json').subscribe(res => {",
			"      const response: any = res;",
			"      this.stateJSON = response;",
			"      console.log(this.stateJSON);",
			"    },",
			"      (err) => {",
			"        alert('failed loading json data');",
			"      });",
			"  }"
		],
		"description": "Get States"
	},
	"Modal Pop Up Hardware back button": {
		"prefix": "ask-modalpopuphardwarebackbtn",
		"body": [
			"this.platform.backButton.subscribe(async () => {",
			"      const modal = await this.modalCtrl.getTop();",
			"      if (modal) {",
			"        modal.dismiss();",
			"        return;",
			"      }",
			"});"
		],
		"description": "Modal Pop Up Hardware back button"
	},
	"Npm Excel download": {
		"prefix": "ask-excelnpm",
		"body": [
			"npm install file-saver --save",
			"npm install xlsx --save",
			"npm install @capacitor/filesystem",
			"npm i capacitor-blob-writer"
		],
		"description": "Npm Excel download"
	},
	"Excel Service": {
		"prefix": "ask-excelservice",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import * as XLSX from 'xlsx';",
			"import { File } from '@ionic-native/file/ngx';",
			"import { ConfigService } from './../config/config.service';",
			"",
			"const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';",
			"const EXCEL_EXTENSION = '.xlsx';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ExcelService {",
			"",
			"  constructor(",
			"    private file: File,",
			"    private config: ConfigService",
			"  ) { }",
			"",
			"  public exportAsExcelFile(json: any[], excelFileName: string): void {",
			"    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);",
			"    console.log('worksheet', worksheet);",
			"    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };",
			"    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });",
			"    this.saveAsExcelFile(excelBuffer, excelFileName);",
			"  }",
			"",
			"  private saveAsExcelFile(buffer: any, fileName: string): void {",
			"    const data: Blob = new Blob([buffer], {",
			"      type: EXCEL_TYPE",
			"    });",
			"    const xlfilename = fileName + new Date().getTime() + EXCEL_EXTENSION;",
			"    this.file.checkDir(this.file.externalRootDirectory, 'Addison')",
			"      .then(_ => {",
			"        this.file.writeFile(this.file.externalRootDirectory + 'Addison/', xlfilename, data).then(response => {",
			"          // ACTION",
			"          console.log('40',response);",
			"          this.config.toastFn(`Downloaded successfully at Addison Folder`);",
			"        }).catch(err => {",
			"          // ACTION",
			"          console.log('44',err);",
			"        })",
			"      })",
			"      .catch(err => {",
			"        this.file.createDir(this.file.externalRootDirectory, 'Addison', false).then(result => {",
			"          this.file.writeFile(this.file.externalRootDirectory + 'Addison/', xlfilename, data).then(response => {",
			"            // ACTION",
			"            console.log('51',response);",
			"            this.config.toastFn(`Downloaded successfully at Addison Folder`);",
			"          }).catch(err => {",
			"            // ACTION",
			"            console.log('54',err);",
			"          })",
			"        })",
			"      });",
			"  }",
			"}",
			""
		],
		"description": "Excel Service"
	},
	"Remove Empty from Array": {
		"prefix": "ask-removeemptyfromarray",
		"body": [
			"this.tempArr= response.data.filter((a) => a);"
		],
		"description": "Remove Empty from Array"
	},
	"Number Only": {
		"prefix": "ask-numbersonly",
		"body": [
			"(keypress)=\"keyPressNumbers($event)\"",
			"keyPressNumbers(event) {",
			"    var charCode = (event.which) ? event.which : event.keyCode;",
			"    // Only Numbers 0-9",
			"    if ((charCode < 48 || charCode > 57)) {",
			"      event.preventDefault();",
			"      return false;",
			"    } else {",
			"      return true;",
			"    }",
			"  }"
		],
		"description": "Number Only"
	},
	"Prevent decimal value": {
		"prefix": "ask-avoiddecimalinput",
		"body": [
			"<input inputmode=\"numeric\" class=\"form-control\" onkeydown=\"if(event.key==='.'){event.preventDefault();}\"",
			"        oninput=\"event.target.value = event.target.value.replace(/[^0-9]*/g,'');\">"
		],
		"description": "Prevent decimal value"
	},
	"Npm Excel Export Download": {
		"prefix": "ask-excelexport",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import * as XLSX from 'xlsx';",
			"import { Directory } from '@capacitor/filesystem';",
			"import write_blob from 'capacitor-blob-writer';",
			"import { ConfigService } from '../config/config.service';",
			"",
			"const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';",
			"const EXCEL_EXTENSION = '.xlsx';",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ExcelService {",
			"",
			"  constructor(",
			"    private config: ConfigService",
			"  ) { }",
			"",
			"  exportXL(data: any) {",
			"    const filename = 'Visitors_' + new Date().getTime() + EXCEL_EXTENSION;",
			"    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);",
			"    // eslint-disable-next-line",
			"    console.log('worksheet', worksheet);",
			"    const workbook: XLSX.WorkBook = { Sheets: { data: worksheet }, SheetNames: ['data'] };",
			"    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });",
			"    const excelData: Blob = new Blob([excelBuffer], {",
			"      type: EXCEL_TYPE",
			"    });",
			"    console.log(excelData);",
			"    write_blob({",
			"      path: filename,",
			"      directory: Directory.Documents,",
			"      blob: excelData",
			"    }).then((x) => {",
			"      console.log(x);",
			"      this.config.toastFn(`Download successfully`);",
			"      // window.alert('Data saved to Documents');",
			"    }).catch(function (e) {",
			"      window.alert(e);",
			"    });",
			"  }",
			"}"
		],
		"description": "Npm Excel Export Download"
	}
}