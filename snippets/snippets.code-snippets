{
	"configservice": {
		"prefix": "ask-config",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Router } from '@angular/router';",
			"import { HttpClient } from '@angular/common/http';",
			"import { AlertController, LoadingController, MenuController, ToastController } from '@ionic/angular';",
			"import { Observable } from 'rxjs';",
			"import { Location } from '@angular/common';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ConfigService {",
			"",
			"  public rootUrl = 'http://domain.com/api/values/';",
			"  isLoading = false;",
			"  constructor(",
			"    private http: HttpClient,",
			"    private loadingCtrl: LoadingController,",
			"    private toastCtrl: ToastController,",
			"    private alertController: AlertController,",
			"    private menuCtrl: MenuController,",
			"    private route: Router,",
			"    private location: Location,",
			"  ) { }",
			"",
			"  backFn() {",
			"    this.location.back();",
			"  }",
			"",
			"  homeFn() {",
			"    this.route.navigate(['/dashboard']);",
			"  }",
			"",
			"  menuFn() {",
			"    this.menuCtrl.toggle();",
			"  }",
			"",
			"  getData(url): Observable<any> {",
			"    const apiURL = `${this.rootUrl}${url}`;",
			"    return this.http.get(apiURL);",
			"  }",
			"",
			"  postData(url, bodyValues): Observable<any> {",
			"    const apiURL = `${this.rootUrl}${url}`;",
			"    return this.http.post(apiURL, bodyValues);",
			"  }",
			"",
			"  inrCurrency(x) {",
			"    const currency = new Intl.NumberFormat('en-IN', { currency: 'INR' }).format(x);",
			"    return currency;",
			"  }",
			"",
			"  async loader(msg) {",
			"    this.isLoading = true;",
			"    return await this.loadingCtrl.create({",
			"      spinner: 'crescent',",
			"      // message : `<div class='ion-text-center'><img src='assets/loading.gif'  /> <br/> <div class='pt-2' >msg</div></div>`,",
			"      message: msg,",
			"      //  message : `<img src='assets/loading.gif' class='img-align' /> <br/> <div class='ion-text-center'>msg</div> `,",
			"      // spinner: spin,  // 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-small' | null | undefined",
			"      // cssClass: 'my-custom-class',   // Write CSS in global.css",
			"      // mode : 'ios',",
			"      duration: 25000,",
			"    }).then(a => {",
			"      a.present().then(() => {",
			"        console.log('presented');",
			"        if (!this.isLoading) {",
			"          a.dismiss().then(() => console.log('abort presenting'));",
			"        }",
			"      });",
			"    });",
			"  }",
			"  async loaderDismiss() {",
			"    this.isLoading = false;",
			"    return await this.loadingCtrl.dismiss().then(() => console.log('dismissed'));",
			"  }",
			"",
			"  async toastFn(msg: string, positiontxt: any = 'bottom', headerString?: string) {",
			"    const toast = await this.toastCtrl.create({",
			"      header: headerString,",
			"      message: msg,",
			"      position: positiontxt,",
			"      duration: 3000,",
			"      // cssClass: 'toastcustom',",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Cancel clicked');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await toast.present();",
			"  }",
			"",
			"  async msgAlertFn(msg) {",
			"    const alert = await this.alertController.create({",
			"      header: 'Alert',",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Confirm Cancel: blah');",
			"          }",
			"        },",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"  async exitInternetFn(heading, msg: string) {",
			"    const alert = await this.alertController.create({",
			"      header: heading,",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"            // console.log('Confirm Okay');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"",
			"  async exitFunction() {",
			"    const alert = await this.alertController.create({",
			"      header: 'Exit App ?',",
			"      message: 'Do you want to exit the app?',",
			"      buttons: [",
			"        {",
			"          text: 'Cancel',",
			"          role: 'cancel',",
			"          handler: () => {",
			"",
			"          }",
			"        },",
			"        {",
			"          text: 'Exit',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"}",
			""
		],
		"description": "configservice"
	},
	"custom scss": {
		"prefix": "ask-scss",
		"body": [
			"* {",
			"    outline: none;",
			"    font-family: \"Roboto\", sans-serif;",
			"}",
			"",
			"ion-content {",
			"    --background: none;",
			"    background: url(\"/assets/bgscreen.jpeg\") no-repeat 0 0;",
			"    background-size: cover;",
			"}",
			"",
			".myTd {",
			"    padding: 2px;",
			"    font-weight: 800;",
			"}",
			".smallFont {",
			"    font-size: small;",
			"    font-weight: bold;",
			"}",
			"",
			".extraSmallFont {",
			"    font-size: 10px;",
			"    font-weight: bold;",
			"}",
			"",
			".myImg {",
			"    height: 70px;",
			"    width: 70px;",
			"    padding: 10px;",
			"    border: 1px solid var(--ion-color-primary);",
			"}",
			"",
			"ion-header ion-toolbar:first-of-type {",
			"    padding-top: 0;",
			"}",
			"",
			".product-modal {",
			"    padding: 20px;",
			"    --height: 25%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".partno-modal {",
			"    .modal-wrapper {",
			"        position: absolute;",
			"        padding: 15px;",
			"        top: 10%;",
			"        left: 2%;",
			"        right: 2%;",
			"        display: block;",
			"        width: 95%;",
			"        --height: 30%;",
			"        --border-radius: 5px;",
			"    }",
			"    // padding: 15px;",
			"    // --height: 30%;",
			"    // top: 26px;",
			"    // --border-radius: 5px;",
			"}",
			"",
			".customAlert {",
			"    padding: 15px;",
			"    --height: 30%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".popup-modal {",
			"    padding: 15px;",
			"    --height: 85%;",
			"    --border-radius: 5px;",
			"}",
			"",
			".divCenter {",
			"    text-align: center;",
			"    position: absolute;",
			"    left: 0;",
			"    right: 0;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"}",
			"",
			".ngSelectFontSize {",
			"    font-size: 12px;",
			"}",
			"",
			".ng-select.custom ::ng-deep .ng-select-container {",
			"    font-family: clear sans Light !important;",
			"    color: #2d2d2d !important;",
			"    font-size: 10px;",
			"}",
			"",
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size: 10px !important;",
			"    color: #efefef;",
			"}",
			"",
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"    outline: 0px !important;",
			"    -webkit-appearance: none;",
			"    box-shadow: none !important;",
			"}",
			""
		],
		"description": "custom scss"
	},
	"getData": {
		"prefix": "ask-getData",
		"body": [
			"this.config.loader('Please Wait ...');",
			"this.config.getData(`$1`).subscribe(res => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    if (response.result === true) {",
			"        this.JSON = response.data;",
			"    }",
			"    else {",
			"        this.JSON = [];",
			"        this.config.toastFn(`No details found`);",
			"    }",
			"        this.config.loaderDismiss();",
			"}, error => {",
			"    this.config.loaderDismiss();",
			"    console.log(error);",
			"});",
			""
		],
		"description": "getData"
	},
	"postData": {
		"prefix": "ask-postData",
		"body": [
			"const values = {",
			"    $1: $2",
			"};",
			"this.config.loader('Please Wait ...');",
			"this.config.postData(`$3`, values).subscribe((res) => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    if (response.result === true) {",
			"        this.JSON = response.data;",
			"    }",
			"    else {",
			"        this.JSON = [];",
			"        this.config.toastFn(`No details found`);",
			"    }",
			"this.config.loaderDismiss();",
			"}, err => {",
			"    this.config.loaderDismiss();",
			"    console.log(err);",
			"});",
			""
		],
		"description": "postData"
	},
	"localstorage": {
		"prefix": "ask-ls",
		"body": [
			"lsUserDetails: any = [];",
			"this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"console.log(lsUserDetails);"
		],
		"description": "localstorage"
	},
	"divCenter": {
		"prefix": "ask-divcenter",
		"body": [
			".divCenter {",
			"    text-align: center;",
			"    position: absolute;",
			"    left: 0;",
			"    right: 0;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"}",
			""
		],
		"description": "divCenter"
	},
	"Remove Box Shadow": {
		"prefix": "ask-removeboxshadow",
		"body": [
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"  outline: 0px !important;",
			"  -webkit-appearance: none;",
			"  box-shadow: none !important;",
			"}"
		],
		"description": "Remove Box Shadow"
	},
	"icon with text below": {
		"prefix": "ask-ibtntxt",
		"body": [
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size:10px !important;",
			"    color: #efefef;",
			"}",
			""
		],
		"description": "icon with text below"
	},
	"ion-thumbnail": {
		"prefix": "ask-ionthumbnail ",
		"body": [
			"ion-thumbnail {",
			"    width: 75% !important;",
			"    height: 75% !important;",
			"    max-width: 80px !important; //any size",
			"    max-height: 80px !important; //any size ",
			"    border: 1px solid #4F4D4B;",
			"}"
		],
		"description": "ion-thumbnail"
	},
	"background image": {
		"prefix": "ask-bgimg",
		"body": [
			"ion-content {",
			"  --background: none;",
			"  background: url(\"/assets/bgscreen.jpeg\") no-repeat 0 0;",
			"  background-size: cover;",
			"}"
		],
		"description": "background image"
	},
	"Basic Npm plugins": {
		"prefix": "ask-npm",
		"body": [
			"npm i font-awesome bootstrap bootstrap-icons jquery animate.css@3.7.0 popper.js ng2-search-filter @ng-select/ng-select",
			"global.scss",
			"@import \"~animate.css/animate.css\";",
			"@import \"~font-awesome/css/font-awesome.css\";",
			"@import \"~bootstrap-icons/font/bootstrap-icons.css\";",
			"@import \"~bootstrap/dist/css/bootstrap.css\";",
			"@import \"./theme/custom.scss\";",
			"",
			"angular.json",
			"Script : ",
			"[",
			"  \"./node_modules/bootstrap/dist/js/bootstrap.min.js\",",
			"  \"./node_modules/jquery/dist/jquery.min.js\"",
			"],"
		],
		"description": "Basic Npm plugins"
	},
	"Auth Guard": {
		"prefix": "ask-guard",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { CanActivate,  Router } from '@angular/router';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class AuthGuard implements CanActivate {",
			"",
			"  constructor(private router: Router) { }",
			"",
			"  canActivate(): boolean {",
			"    console.log(localStorage.getItem('token'));",
			"    if (localStorage.getItem('token')) {",
			"      return true;",
			"    }",
			"    else {",
			"      this.router.navigate(['login']);",
			"    }",
			"  }",
			"",
			"}",
			""
		],
		"description": "Auth Guard"
	},
	"HttpInterceptor": {
		"prefix": "ask-HttpInterceptor",
		"body": [
			"import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';",
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs';",
			"",
			"@Injectable()",
			"export class InterceptorsService implements HttpInterceptor {",
			"  constructor() { }",
			"  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
			"    request = request.clone({",
			"      setHeaders: {",
			"        'Content-Type': 'application/json'",
			"      }",
			"    });",
			"    console.log(request);",
			"    return next.handle(request);",
			"  }",
			"}",
			""
		],
		"description": "HttpInterceptor"
	},
	"import HTTP_INTERCEPTORS": {
		"prefix": "ask-ImportHTTPINTERCEPTORS",
		"body": [
			"{",
			"      provide: HTTP_INTERCEPTORS,",
			"      useClass: InterceptorsService,",
			"      multi: true",
			"}"
		],
		"description": "import HTTP_INTERCEPTORS"
	},
	"network_security_config": {
		"prefix": "ask-network_security_config",
		"body": [
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<network-security-config>",
			"    <base-config cleartextTrafficPermitted=\"true\">",
			"        <trust-anchors>",
			"            <certificates src=\"system\" />",
			"        </trust-anchors>",
			"    </base-config>",
			"    <domain-config cleartextTrafficPermitted=\"true\">",
			"        <domain includeSubdomains=\"true\">doamin.com</domain>",
			"        <domain includeSubdomains=\"true\">http://domain.com</domain>",
			"    </domain-config>",
			"</network-security-config>",
			""
		],
		"description": "network_security_config"
	},
	"Login": {
		"prefix": "ask-login",
		"body": [
			"this.config.loader('Please wait...');",
			"    this.config.postData(`$1`, this.loginValidate).subscribe((res) => {",
			"      const response: any = res;",
			"      if (response.result === true) {",
			"        localStorage.setItem('lsUserDetails', JSON.stringify(response.data));",
			"         localStorage.setItem('token', 'true');",
			"        this.config.loaderDismiss();",
			"        this.loginForm.reset();",
			"        this.menuCtrl.enable(true);",
			"        this.router.navigate(['home']);",
			"      }",
			"      else {",
			"        this.config.loaderDismiss();",
			"      }",
			"    }, err => {",
			"      this.config.loaderDismiss();",
			"      console.log(err);",
			"    });",
			""
		],
		"description": "Login"
	},
	"call method": {
		"prefix": "ask-callmethod",
		"body": [
			"// above @component",
			"declare var window;",
			"//constructor",
			"window.app = this;",
			"",
			"callmethod() {",
			"   if (localStorage.getItem('lsUserDetails') != null) {",
			"     this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"   }",
			"}"
		],
		"description": "call method"
	},
	"Animate Alert": {
		"prefix": "ask-animateAlert",
		"body": [
			"import { AnimationController, Animation } from '@ionic/angular';",
			"",
			"export const customAlertAnimation = (baseEl: HTMLElement, opts?: any): Animation => {",
			"  console.log('baseEl: ', baseEl);",
			"  console.log('opts: ', opts);",
			"  const animationCtrl = new AnimationController();",
			"  const wrapperElem = baseEl.querySelector('.alert-wrapper');",
			"  return (animationCtrl.create()",
			"    .addElement(wrapperElem)",
			"    .duration(1000)",
			"    // .iterations(Infinity)",
			"    .easing('ease-in')",
			"    .fromTo('opacity', 0, 1)",
			"    .fromTo('transform', `translateY(-${baseEl.clientHeight}px)`, 'translateY(0px)') // Top to center",
			"    // .fromTo('transform',  'translateX(100px)','translateX(0px)')  // Right to center",
			"  );",
			"};",
			""
		],
		"description": "Animate Alert"
	},
	"Animate Toast": {
		"prefix": "ask-animateToast",
		"body": [
			"import { AnimationController, Animation } from '@ionic/angular';",
			"",
			"export const customToastAnimation = (baseEl: HTMLElement, opts?: any): Animation => {",
			"  console.log('baseEl: ', baseEl);",
			"  console.log('opts: ', opts);",
			"  const animationCtrl = new AnimationController();",
			"  const wrapperElem = baseEl.querySelector('.toast-wrapper');",
			"  return (animationCtrl.create()",
			"    .addElement(wrapperElem)",
			"    .duration(1000)",
			"    // .iterations(Infinity)",
			"    .easing('ease-in')",
			"    .fromTo('opacity', 0, 1)",
			"    .fromTo('transform', `translateX(-${baseEl.clientHeight}px)`, 'translateY(10px)') // Top",
			"  );",
			"};",
			""
		],
		"description": "Animate Toast"
	},
	"Animate Header": {
		"prefix": "ask-animateHeader",
		"body": [
			"<ion-header #header>",
			"import { AnimationController } from '@ionic/angular';",
			"@ViewChild('header', { read: ElementRef, static: true }) header: ElementRef;",
			"const animateHeader = this.animationCtrl.create()",
			"      .addElement(this.header.nativeElement)",
			"      .duration(1000)",
			"      .iterations(1)",
			"      .fromTo('opacity', '0', '1')",
			"      .fromTo('transform', 'translateY(-100px)', 'translateY(0px)');",
			"    animateHeader.play();"
		],
		"description": "Animate Header"
	},
	"Bootstrap Table": {
		"prefix": "ask-table",
		"body": [
			"<div class=\"p-1\" *ngIf=\"Json.length > 0\">",
			"    <div class=\"table-responsive\">",
			"        <table class=\"table table-striped\">",
			"            <thead>",
			"                <tr class=\"customLabel custTbl\">",
			"                    <th class=\"text-center cusTblHeadFont ion-text-nowrap\">#</th>",
			"                    <th class=\"text-center cusTblHeadFont ion-text-nowrap\">",
			"                    </th>",
			"                </tr>",
			"            </thead>",
			"            <tbody>",
			"                <tr class=\"customLabel\" *ngFor=\"let r of Json; let i =index;\">",
			"                    <td class=\"ion-text-nowrap cusTblFont text-center\">{{i+1}}</td>",
			"                    <td class=\"ion-text-nowrap cusTblFont text-center\">",
			"",
			"                    </td>",
			"                </tr>",
			"                <tr *ngIf=\"Json.length === 0\">",
			"                    <td colspan=\"2\" class=\"text-center\">",
			"                        <ion-text color=\"danger\">",
			"                            No details found",
			"                        </ion-text>",
			"                    </td>",
			"                </tr>",
			"            </tbody>",
			"        </table>",
			"    </div>",
			"</div>"
		],
		"description": "Bootstrap Table"
	},
	"Popup component": {
		"prefix": "ask-popup",
		"body": [
			"async popup(object) {",
			"    const modalCreate = await this.modalCtrl.create({",
			"        component: Component,",
			"        cssClass: 'popup-modal',",
			"        backdropDismiss: false,",
			"        componentProps: {",
			"            obj: object",
			"        }",
			"    });",
			"    modalCreate.onDidDismiss().then((data: any) => {",
			"        console.log(data);",
			"        if (data.data.dismissed) {",
			"",
			"        }",
			"    });",
			"    return modalCreate.present();",
			"}"
		],
		"description": "Popup component"
	},
	"App Component": {
		"prefix": "ask-component",
		"body": [
			"import { Component } from '@angular/core';",
			"import { Network } from '@ionic-native/network/ngx';",
			"import { ConfigService } from './services/config/config.service';",
			"import { Platform } from '@ionic/angular';",
			"",
			"declare var window;",
			"@Component({",
			"  selector: 'app-root',",
			"  templateUrl: 'app.component.html',",
			"  styleUrls: ['app.component.scss'],",
			"})",
			"",
			"export class AppComponent {",
			"  public lsUserDetails: any = [];",
			"  public appPages = [",
			"    { title: 'Home', url: '/home', icon: 'home' }",
			"  ];",
			"  constructor(",
			"    private network: Network,",
			"    public config: ConfigService,",
			"    public platform: Platform,",
			"  ) {",
			"    this.platform.ready().then(() => {",
			"      // this.statusBar.styleLightContent();",
			"      if (localStorage.getItem('lsUserDetails') != null) {",
			"        this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"      }",
			"      this.network.onConnect().subscribe(() => {",
			"        setTimeout(() => {",
			"          if (this.network.type === 'wifi') {",
			"            console.log('we got a wifi connection, woohoo!');",
			"          }",
			"        }, 3000);",
			"      });",
			"      this.network.onDisconnect().subscribe(() => {",
			"        this.config.exitInternetFn('Exit and try again', 'Internet is not available ...!');",
			"        this.config.toastFn(`Internet is not available`);",
			"      });",
			"    });",
			"    window.app = this;",
			"  }",
			"",
			"  callmethod() {",
			"    if (localStorage.getItem('lsUserDetails') != null) {",
			"      this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"    }",
			"  }",
			"}",
			""
		],
		"description": "App Component"
	},
	"custom fonts": {
		"prefix": "ask-fonts",
		"body": [
			"@font-face {",
			"    font-family: \"Montserrat\";",
			"    src: url(\"../assets/fonts/Montserrat-Regular.ttf\");",
			"    font-weight: normal;",
			"    font-style: normal;",
			"}"
		],
		"description": "custom fonts"
	},
	"Activated Route": {
		"prefix": "ask-activatedRoute",
		"body": [
			"private activatedRoute: ActivatedRoute,",
			" this.activatedRoute.queryParams.subscribe(params => {",
			"      if (params && params.querystring) {",
			"        this.obj = JSON.parse(params.querystring);",
			"        console.log(this.obj);",
			"      }",
			"    });"
		],
		"description": "Activated Route"
	},
	"Navigation Extras": {
		"prefix": "ask-navigationExtras",
		"body": [
			"   const obj = {",
			"      $1: $2",
			"    };",
			"    const navigationExtras: NavigationExtras = {",
			"      queryParams: {",
			"        querystring: JSON.stringify(obj)",
			"      }",
			"    };",
			"    this.route.navigate([`/$3`], navigationExtras);",
			""
		],
		"description": "Navigation Extras"
	},
	"Snapshot": {
		"prefix": "ask-snapshot",
		"body": [
			"private activatedRoute: ActivatedRoute,",
			"this.activatedRoute.snapshot.paramMap.get('id');"
		],
		"description": "Snapshot"
	},
	"No Record": {
		"prefix": "ask-norecord",
		"body": [
			"<div class=\"divCenter\" *ngIf=\"JSON.length === 0\">",
			"    <ion-text color=\"danger\">",
			"      <h1>No details found</h1>",
			"    </ion-text>",
			"  </div>",
			""
		],
		"description": "No Record"
	},
	"Cart Count": {
		"prefix": "ask-cartcount",
		"body": [
			".badge-one {",
			"    position: absolute;",
			"    top: 0px;",
			"    right: -5px;",
			"    font-size: 0.6em;",
			"    --padding-start: 5px;",
			"    --padding-end: 5px;",
			"}",
			"<ion-buttons slot=\"end\">",
			"      <ion-button class=\"badge-button\">",
			"        <ion-icon size=\"large\" name=\"cart\"></ion-icon>",
			"        <ion-badge class=\"badge-one\" color=\"danger\">{{cartCount}}</ion-badge>",
			"      </ion-button>",
			" </ion-buttons>"
		],
		"description": "Cart Count"
	},
	"Translate": {
		"prefix": "ask-translate",
		"body": [
			"npm i @ngx-translate/core @ngx-translate/http-loader",
			"",
			"import { TranslateModule, TranslateLoader } from '@ngx-translate/core';",
			"import { TranslateHttpLoader } from '@ngx-translate/http-loader';",
			"import { TranslateConfigService } from './services/translate/translate-config.service';",
			"",
			"// above NgModule",
			"export function LanguageLoader(http: HttpClient) {",
			"  return new TranslateHttpLoader(http, 'assets/translate/', '.json');",
			"}",
			"",
			"// imports array",
			"TranslateModule.forRoot({",
			"      loader: {",
			"        provide: TranslateLoader,",
			"        useFactory: (LanguageLoader),",
			"        deps: [HttpClient]",
			"      }",
			"    }),",
			"",
			"//providers Array ",
			"TranslateConfigService"
		],
		"description": "Translate"
	},
	"Translate Service": {
		"prefix": "ask-translate-config.service.ts",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { TranslateService } from '@ngx-translate/core';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class TranslateConfigService {",
			"",
			"  constructor(",
			"    private translate: TranslateService",
			"  ) { }",
			"",
			"  getDefaultLanguage() {",
			"    const language = this.translate.getBrowserLang();",
			"    this.translate.setDefaultLang(language);",
			"    return language;",
			"  }",
			"",
			"  setLanguage(setLang) {",
			"    this.translate.use(setLang);",
			"  }",
			"}",
			""
		],
		"description": "Translate Service"
	},
	"Translate component": {
		"prefix": "ask-translate-component.ts",
		"body": [
			"import { TranslateConfigService } from 'src/app/services/translate/translate-config.service';",
			"private translateConfigService: TranslateConfigService,",
			"if (localStorage.getItem('lsLang') === null) {",
			"        localStorage.setItem('lsLang', 'en');",
			"        this.translateConfigService.setLanguage('en');",
			"}",
			"console.log(localStorage.getItem('lsLang'));"
		],
		"description": "Translate component"
	},
	"Choose language popup": {
		"prefix": "ask-chooselang",
		"body": [
			"<ion-header>",
			"  <ion-grid class=\"ion-no-padding\" color=\"primary\" style=\"background-color: #13B3E4;color: white;\">",
			"    <ion-row>",
			"      <ion-col size=\"8\">",
			"      <div class=\"p-3\">Choose Langauge</div>",
			"      </ion-col>",
			"      <ion-col size=\"4\" class=\"text-right\" >",
			"          <ion-button class=\"pt-2\" (click)=\"close()\" fill=\"clear\" color=\"dark\">",
			"            <ion-icon name=\"close\" color=\"light\" slot=\"start\"></ion-icon>",
			"          </ion-button>",
			"      </ion-col>",
			"    </ion-row>",
			"  </ion-grid>",
			"</ion-header>",
			"",
			"<ion-content>",
			"  <div class=\"divCenter1\">",
			"    <ion-list lines=\"full\" style=\"background-color: #F5F5F5;\">",
			"      <ion-radio-group [(ngModel)]=\"lang\">   ",
			"        <ion-item>",
			"          <ion-label>English</ion-label>",
			"          <ion-radio slot=\"end\" value=\"en\"></ion-radio>",
			"        </ion-item>",
			"    ",
			"        <ion-item>",
			"          <ion-label>Hindi</ion-label>",
			"          <ion-radio slot=\"end\" value=\"hin\"></ion-radio>",
			"        </ion-item>",
			"      </ion-radio-group>",
			"    </ion-list>",
			"    <div class=\"ion-text-center\">",
			"      <ion-button  (click)=\"getLang()\"  >Submit</ion-button>",
			"    </div>",
			"  </div>",
			"</ion-content>",
			"",
			"import { Component, OnInit } from '@angular/core';",
			"import { ModalController } from '@ionic/angular';",
			"import { TranslateConfigService } from 'src/app/services/translate/translate-config.service';",
			"",
			"@Component({",
			"  selector: 'app-chooselang',",
			"  templateUrl: './chooselang.component.html',",
			"  styleUrls: ['./chooselang.component.scss'],",
			"})",
			"export class ChooselangComponent implements OnInit {",
			"",
			"  lang;",
			"  constructor(",
			"    private modalCtrl: ModalController,",
			"    private translateConfigService: TranslateConfigService,",
			"  ) { }",
			"",
			"  ngOnInit() {",
			"    if (localStorage.getItem('lsLang') != null) {",
			"      this.lang = localStorage.getItem('lsLang');",
			"    }",
			"  }",
			"",
			"  close() {",
			"    this.modalCtrl.dismiss();",
			"  }",
			"",
			"  getLang() {",
			"    console.log(this.lang);",
			"    localStorage.setItem('lsLang', this.lang);",
			"    this.translateConfigService.setLanguage(this.lang);",
			"    this.modalCtrl.dismiss();",
			"  }",
			"",
			"}",
			"",
			"ion-list, ion-item, ion-radio-group {",
			"    --background: #F5F5F5 !important;",
			"}",
			"",
			""
		],
		"description": "Choose language popup"
	}
}