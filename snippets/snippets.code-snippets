{
	"configservice": {
		"prefix": "ask-config",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Router } from '@angular/router';",
			"import { HttpClient } from '@angular/common/http';",
			"import { AlertController, LoadingController, MenuController, ModalController, ToastController } from '@ionic/angular';",
			"import { Observable } from 'rxjs';",
			"import { Location } from '@angular/common';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ConfigService {",
			"",
			"  public rootUrl = 'http://domain.com/api/values/';",
			"  isLoading = false;",
			"  constructor(",
			"    private http: HttpClient,",
			"    private loadingCtrl: LoadingController,",
			"    private toastCtrl: ToastController,",
			"    private alertController: AlertController,",
			"    private menuCtrl: MenuController,",
			"    private modalCtrl: ModalController,",
			"    private route: Router,",
			"    private location: Location,",
			"  ) { }",
			"",
			"  backFn() {",
			"    this.location.back();",
			"  }",
			"",
			"  homeFn() {",
			"    this.route.navigate(['/dashboard']);",
			"  }",
			"",
			"  menuFn() {",
			"    this.menuCtrl.toggle();",
			"  }",
			"",
			"  getData(url): Observable<any> {",
			"    const geturl = `${this.rootUrl}url`;",
			"    return this.http.get(geturl);",
			"  }",
			"",
			"  postData(url, bodyValues): Observable<any> {",
			"    const apiURL = `${this.rootUrl}url`;",
			"    return this.http.post(apiURL, bodyValues);",
			"  }",
			"",
			"  inrCurrency(x) {",
			"    const currency = new Intl.NumberFormat('en-IN', { currency: 'INR' }).format(x);",
			"    return currency;",
			"  }",
			"",
			"  async loader(msg) {",
			"    this.isLoading = true;",
			"    return await this.loadingCtrl.create({",
			"      spinner: 'crescent',",
			"      // message : `<div class='ion-text-center'><img src='assets/loading.gif'  /> <br/> <div class='pt-2' >msg</div></div>`,",
			"      message: msg,",
			"      //  message : `<img src='assets/loading.gif' class='img-align' /> <br/> <div class='ion-text-center'>msg</div> `,",
			"      // spinner: spin,  // 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-small' | null | undefined",
			"      // cssClass: 'my-custom-class',   // Write CSS in global.css",
			"      // mode : 'ios',",
			"      duration: 25000,",
			"    }).then(a => {",
			"      a.present().then(() => {",
			"        console.log('presented');",
			"        if (!this.isLoading) {",
			"          a.dismiss().then(() => console.log('abort presenting'));",
			"        }",
			"      });",
			"    });",
			"  }",
			"  async loaderDismiss() {",
			"    this.isLoading = false;",
			"    return await this.loadingCtrl.dismiss().then(() => console.log('dismissed'));",
			"  }",
			"",
			"  async toastFn(msg: string, positiontxt: any = 'bottom', headerString?: string) {",
			"    const toast = await this.toastCtrl.create({",
			"      header: headerString,",
			"      message: msg,",
			"      position: positiontxt,",
			"      duration: 3000,",
			"      // cssClass: 'toastcustom',",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Cancel clicked');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await toast.present();",
			"  }",
			"",
			"  async msgAlertFn(msg) {",
			"    const alert = await this.alertController.create({",
			"      header: 'Alert',",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Confirm Cancel: blah');",
			"          }",
			"        },",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"  async exitInternetFn(heading, msg: string) {",
			"    const alert = await this.alertController.create({",
			"      header: heading,",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"            // console.log('Confirm Okay');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"",
			"  async exitFunction() {",
			"    const alert = await this.alertController.create({",
			"      header: 'Exit App ?',",
			"      message: 'Do you want to exit the app?',",
			"      buttons: [",
			"        {",
			"          text: 'Cancel',",
			"          role: 'cancel',",
			"          handler: () => {",
			"",
			"          }",
			"        },",
			"        {",
			"          text: 'Exit',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"}",
			""
		],
		"description": "configservice"
	},
	"custom scss": {
		"prefix": "ask-css",
		"body": [
			"* {",
			"  outline: none;",
			"  font-family: \"Montserrat\";",
			"}",
			"",
			".customAlert{",
			"  padding: 15px;",
			"  --height: 30%;",
			"  --border-radius: 5px;",
			"}",
			"",
			".divCenter {",
			"  text-align: center;",
			"  position: absolute;",
			"  left: 0;",
			"  right: 0;",
			"  top: 50%;",
			"  transform: translateY(-50%);",
			"}",
			"",
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size:10px !important;",
			"    color: #efefef;",
			"  }",
			"",
			"",
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"  outline: 0px !important;",
			"  -webkit-appearance: none;",
			"  box-shadow: none !important;",
			"}",
			""
		],
		"description": "custom scss"
	}
}