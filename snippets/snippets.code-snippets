{
	"configservice": {
		"prefix": "ask-config",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Router } from '@angular/router';",
			"import { HttpClient } from '@angular/common/http';",
			"import { AlertController, LoadingController, MenuController, ModalController, ToastController } from '@ionic/angular';",
			"import { Observable } from 'rxjs';",
			"import { Location } from '@angular/common';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ConfigService {",
			"",
			"  public rootUrl = 'http://domain.com/api/values/';",
			"  isLoading = false;",
			"  constructor(",
			"    private http: HttpClient,",
			"    private loadingCtrl: LoadingController,",
			"    private toastCtrl: ToastController,",
			"    private alertController: AlertController,",
			"    private menuCtrl: MenuController,",
			"    private modalCtrl: ModalController,",
			"    private route: Router,",
			"    private location: Location,",
			"  ) { }",
			"",
			"  backFn() {",
			"    this.location.back();",
			"  }",
			"",
			"  homeFn() {",
			"    this.route.navigate(['/dashboard']);",
			"  }",
			"",
			"  menuFn() {",
			"    this.menuCtrl.toggle();",
			"  }",
			"",
			"  getData(url): Observable<any> {",
			"    const geturl = `${this.rootUrl}url`;",
			"    return this.http.get(geturl);",
			"  }",
			"",
			"  postData(url, bodyValues): Observable<any> {",
			"    const apiURL = `${this.rootUrl}url`;",
			"    return this.http.post(apiURL, bodyValues);",
			"  }",
			"",
			"  inrCurrency(x) {",
			"    const currency = new Intl.NumberFormat('en-IN', { currency: 'INR' }).format(x);",
			"    return currency;",
			"  }",
			"",
			"  async loader(msg) {",
			"    this.isLoading = true;",
			"    return await this.loadingCtrl.create({",
			"      spinner: 'crescent',",
			"      // message : `<div class='ion-text-center'><img src='assets/loading.gif'  /> <br/> <div class='pt-2' >msg</div></div>`,",
			"      message: msg,",
			"      //  message : `<img src='assets/loading.gif' class='img-align' /> <br/> <div class='ion-text-center'>msg</div> `,",
			"      // spinner: spin,  // 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-small' | null | undefined",
			"      // cssClass: 'my-custom-class',   // Write CSS in global.css",
			"      // mode : 'ios',",
			"      duration: 25000,",
			"    }).then(a => {",
			"      a.present().then(() => {",
			"        console.log('presented');",
			"        if (!this.isLoading) {",
			"          a.dismiss().then(() => console.log('abort presenting'));",
			"        }",
			"      });",
			"    });",
			"  }",
			"  async loaderDismiss() {",
			"    this.isLoading = false;",
			"    return await this.loadingCtrl.dismiss().then(() => console.log('dismissed'));",
			"  }",
			"",
			"  async toastFn(msg: string, positiontxt: any = 'bottom', headerString?: string) {",
			"    const toast = await this.toastCtrl.create({",
			"      header: headerString,",
			"      message: msg,",
			"      position: positiontxt,",
			"      duration: 3000,",
			"      // cssClass: 'toastcustom',",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Cancel clicked');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await toast.present();",
			"  }",
			"",
			"  async msgAlertFn(msg) {",
			"    const alert = await this.alertController.create({",
			"      header: 'Alert',",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          role: 'cancel',",
			"          handler: () => {",
			"            console.log('Confirm Cancel: blah');",
			"          }",
			"        },",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"  async exitInternetFn(heading, msg: string) {",
			"    const alert = await this.alertController.create({",
			"      header: heading,",
			"      message: msg,",
			"      buttons: [",
			"        {",
			"          text: 'Okay',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"            // console.log('Confirm Okay');",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"",
			"  async exitFunction() {",
			"    const alert = await this.alertController.create({",
			"      header: 'Exit App ?',",
			"      message: 'Do you want to exit the app?',",
			"      buttons: [",
			"        {",
			"          text: 'Cancel',",
			"          role: 'cancel',",
			"          handler: () => {",
			"",
			"          }",
			"        },",
			"        {",
			"          text: 'Exit',",
			"          handler: () => {",
			"            navigator['app'].exitApp();",
			"          }",
			"        }",
			"      ]",
			"    });",
			"    await alert.present();",
			"  }",
			"",
			"}",
			""
		],
		"description": "configservice"
	},
	"custom scss": {
		"prefix": "ask-css",
		"body": [
			"* {",
			"  outline: none;",
			"  font-family: \"Montserrat\";",
			"}",
			"",
			".customAlert{",
			"  padding: 15px;",
			"  --height: 30%;",
			"  --border-radius: 5px;",
			"}",
			"",
			".divCenter {",
			"  text-align: center;",
			"  position: absolute;",
			"  left: 0;",
			"  right: 0;",
			"  top: 50%;",
			"  transform: translateY(-50%);",
			"}",
			"",
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size:10px !important;",
			"    color: #efefef;",
			"  }",
			"",
			"",
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"  outline: 0px !important;",
			"  -webkit-appearance: none;",
			"  box-shadow: none !important;",
			"}",
			""
		],
		"description": "custom scss"
	},
	"getData": {
		"prefix": "ask-getData",
		"body": [
			"this.config.loader('Please Wait ...');",
			"this.config.getData(`$1`).subscribe(res => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    this.config.loaderDismiss();",
			"}, error => {",
			"    this.config.loaderDismiss();",
			"    console.log(error);",
			"});",
			""
		],
		"description": "getData"
	},
	"postData": {
		"prefix": "ask-postData",
		"body": [
			"const values = {",
			"    $1: $2",
			"};",
			"this.config.loader('Please Wait ...');",
			"this.config.postData(``, values).subscribe((res) => {",
			"    const response: any = res;",
			"    console.log(response);",
			"    if (response.result === true) {",
			"        this.JSON = response.data;",
			"        this.config.loaderDismiss();",
			"    }",
			"    else {",
			"        this.config.loaderDismiss();",
			"    }",
			"}, err => {",
			"    this.config.loaderDismiss();",
			"    console.log(err);",
			"});",
			""
		],
		"description": "postData"
	},
	"localstorage": {
		"prefix": "ask-ls",
		"body": [
			"lsUserDetails: any = [];",
			"this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"console.log(lsUserDetails);"
		],
		"description": "localstorage"
	},
	"divCenter": {
		"prefix": "ask-divcenter",
		"body": [
			".divCenter {",
			"    text-align: center;",
			"    position: absolute;",
			"    left: 0;",
			"    right: 0;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"}",
			""
		],
		"description": "divCenter"
	},
	"Remove Box Shadow": {
		"prefix": "ask-removeboxshadow",
		"body": [
			"textarea:active,",
			"input:active,",
			"textarea:focus,",
			"input:focus,",
			"button:focus,",
			"button:active,",
			"button:hover,",
			"label:focus,",
			".btn:active,",
			".btn.active,",
			"ion-select {",
			"  outline: 0px !important;",
			"  -webkit-appearance: none;",
			"  box-shadow: none !important;",
			"}"
		],
		"description": "Remove Box Shadow"
	},
	"icon with text below": {
		"prefix": "ask-ibtntxt",
		"body": [
			"ion-button div {",
			"    display: flex;",
			"    flex-flow: column nowrap;",
			"    align-items: center;",
			"    font-size:10px !important;",
			"    color: #efefef;",
			"}",
			""
		],
		"description": "icon with text below"
	},
	"ion-thumbnail": {
		"prefix": "ask-ionthumbnail ",
		"body": [
			"ion-thumbnail {",
			"    width: 75% !important;",
			"    height: 75% !important;",
			"    max-width: 80px !important; //any size",
			"    max-height: 80px !important; //any size ",
			"    border: 1px solid #4F4D4B;",
			"}"
		],
		"description": "ion-thumbnail"
	},
	"background image": {
		"prefix": "ask-bgimg",
		"body": [
			"ion-content {",
			"  --background: none;",
			"  background: url(\"/assets/bgscreen.jpeg\") no-repeat 0 0;",
			"  background-size: cover;",
			"}"
		],
		"description": "background image"
	},
	"Basic Npm plugins": {
		"prefix": "ask-npm",
		"body": [
			"npm i font-awesome bootstrap bootstrap-icons jquery animate.css@3.7.0 popper.js ng2-search-filter @ng-select/ng-select",
			"global.scss",
			"@import \"~animate.css/animate.css\";",
			"@import \"~font-awesome/css/font-awesome.css\";",
			"@import \"~bootstrap-icons/font/bootstrap-icons.css\";",
			"@import \"~bootstrap/dist/css/bootstrap.css\";",
			"@import \"./theme/custom.scss\";",
			"",
			"angular.json",
			"Script : ",
			"[",
			"  \"./node_modules/bootstrap/dist/js/bootstrap.min.js\",",
			"  \"./node_modules/jquery/dist/jquery.min.js\"",
			"],"
		],
		"description": "Basic Npm plugins"
	},
	"Auth Guard": {
		"prefix": "ask-guard",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { CanActivate,  Router } from '@angular/router';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class AuthGuard implements CanActivate {",
			"",
			"  constructor(private router: Router) { }",
			"",
			"  canActivate(): boolean {",
			"    console.log(localStorage.getItem('token'));",
			"    if (localStorage.getItem('token')) {",
			"      return true;",
			"    }",
			"    else {",
			"      this.router.navigate(['login']);",
			"    }",
			"  }",
			"",
			"}",
			""
		],
		"description": "Auth Guard"
	},
	"HttpInterceptor": {
		"prefix": "ask-HttpInterceptor",
		"body": [
			"import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';",
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs';",
			"",
			"@Injectable()",
			"export class InterceptorsService implements HttpInterceptor {",
			"  constructor() { }",
			"  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
			"    request = request.clone({",
			"      setHeaders: {",
			"        'Content-Type': 'application/json'",
			"      }",
			"    });",
			"    console.log(request);",
			"    return next.handle(request);",
			"  }",
			"}",
			""
		],
		"description": "HttpInterceptor"
	},
	"import HTTP_INTERCEPTORS": {
		"prefix": "ask-ImportHTTPINTERCEPTORS",
		"body": [
			"{",
			"      provide: HTTP_INTERCEPTORS,",
			"      useClass: InterceptorsService,",
			"      multi: true",
			"}"
		],
		"description": "import HTTP_INTERCEPTORS"
	},
	"network_security_config": {
		"prefix": "ask-network_security_config",
		"body": [
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>",
			"<network-security-config>",
			"    <base-config cleartextTrafficPermitted=\"true\">",
			"        <trust-anchors>",
			"            <certificates src=\"system\" />",
			"        </trust-anchors>",
			"    </base-config>",
			"    <domain-config cleartextTrafficPermitted=\"true\">",
			"        <domain includeSubdomains=\"true\">doamin.com</domain>",
			"        <domain includeSubdomains=\"true\">http://domain.com</domain>",
			"    </domain-config>",
			"</network-security-config>",
			""
		],
		"description": "network_security_config"
	},
	"Login": {
		"prefix": "ask-login",
		"body": [
			"this.config.loader('Please wait...');",
			"    this.config.postData(`$1`, this.loginValidate).subscribe((res) => {",
			"      const response: any = res;",
			"      if (response.result === true) {",
			"        localStorage.setItem('lsUserDetails', JSON.stringify(response.data));",
			"         localStorage.setItem('token', 'true');",
			"        this.config.loaderDismiss();",
			"        this.loginForm.reset();",
			"        this.menuCtrl.enable(true);",
			"        this.router.navigate(['home']);",
			"      }",
			"      else {",
			"        this.config.loaderDismiss();",
			"      }",
			"    }, err => {",
			"      this.config.loaderDismiss();",
			"      console.log(err);",
			"    });",
			""
		],
		"description": "Login"
	},
	"call method": {
		"prefix": "ask-callmethod",
		"body": [
			"// above @component",
			"declare var window;",
			"//constructor",
			"window.app = this;",
			"",
			"callmethod() {",
			"   if (localStorage.getItem('lsUserDetails') != null) {",
			"     this.lsUserDetails = JSON.parse(localStorage.getItem('lsUserDetails'));",
			"   }",
			"}"
		],
		"description": "call method"
	}
}